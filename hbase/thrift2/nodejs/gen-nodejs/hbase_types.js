//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.TDeleteType = {
  'DELETE_COLUMN' : 0,
  'DELETE_COLUMNS' : 1,
  'DELETE_FAMILY' : 2,
  'DELETE_FAMILY_VERSION' : 3
};
ttypes.TDurability = {
  'USE_DEFAULT' : 0,
  'SKIP_WAL' : 1,
  'ASYNC_WAL' : 2,
  'SYNC_WAL' : 3,
  'FSYNC_WAL' : 4
};
ttypes.TConsistency = {
  'STRONG' : 1,
  'TIMELINE' : 2
};
ttypes.TReadType = {
  'DEFAULT' : 1,
  'STREAM' : 2,
  'PREAD' : 3
};
ttypes.TCompareOp = {
  'LESS' : 0,
  'LESS_OR_EQUAL' : 1,
  'EQUAL' : 2,
  'NOT_EQUAL' : 3,
  'GREATER_OR_EQUAL' : 4,
  'GREATER' : 5,
  'NO_OP' : 6
};
ttypes.TBloomFilterType = {
  'NONE' : 0,
  'ROW' : 1,
  'ROWCOL' : 2,
  'ROWPREFIX_FIXED_LENGTH' : 3
};
ttypes.TCompressionAlgorithm = {
  'LZO' : 0,
  'GZ' : 1,
  'NONE' : 2,
  'SNAPPY' : 3,
  'LZ4' : 4,
  'BZIP2' : 5,
  'ZSTD' : 6
};
ttypes.TDataBlockEncoding = {
  'NONE' : 0,
  'PREFIX' : 2,
  'DIFF' : 3,
  'FAST_DIFF' : 4,
  'ROW_INDEX_V1' : 7
};
ttypes.TKeepDeletedCells = {
  'FALSE' : 0,
  'TRUE' : 1,
  'TTL' : 2
};
var TTimeRange = module.exports.TTimeRange = function(args) {
  this.minStamp = null;
  this.maxStamp = null;
  if (args) {
    if (args.minStamp !== undefined && args.minStamp !== null) {
      this.minStamp = args.minStamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field minStamp is unset!');
    }
    if (args.maxStamp !== undefined && args.maxStamp !== null) {
      this.maxStamp = args.maxStamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field maxStamp is unset!');
    }
  }
};
TTimeRange.prototype = {};
TTimeRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.minStamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.maxStamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTimeRange.prototype.write = function(output) {
  output.writeStructBegin('TTimeRange');
  if (this.minStamp !== null && this.minStamp !== undefined) {
    output.writeFieldBegin('minStamp', Thrift.Type.I64, 1);
    output.writeI64(this.minStamp);
    output.writeFieldEnd();
  }
  if (this.maxStamp !== null && this.maxStamp !== undefined) {
    output.writeFieldBegin('maxStamp', Thrift.Type.I64, 2);
    output.writeI64(this.maxStamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TColumn = module.exports.TColumn = function(args) {
  this.family = null;
  this.qualifier = null;
  this.timestamp = null;
  if (args) {
    if (args.family !== undefined && args.family !== null) {
      this.family = args.family;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field family is unset!');
    }
    if (args.qualifier !== undefined && args.qualifier !== null) {
      this.qualifier = args.qualifier;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
TColumn.prototype = {};
TColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.family = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.qualifier = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TColumn.prototype.write = function(output) {
  output.writeStructBegin('TColumn');
  if (this.family !== null && this.family !== undefined) {
    output.writeFieldBegin('family', Thrift.Type.STRING, 1);
    output.writeBinary(this.family);
    output.writeFieldEnd();
  }
  if (this.qualifier !== null && this.qualifier !== undefined) {
    output.writeFieldBegin('qualifier', Thrift.Type.STRING, 2);
    output.writeBinary(this.qualifier);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TColumnValue = module.exports.TColumnValue = function(args) {
  this.family = null;
  this.qualifier = null;
  this.value = null;
  this.timestamp = null;
  this.tags = null;
  this.type = null;
  if (args) {
    if (args.family !== undefined && args.family !== null) {
      this.family = args.family;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field family is unset!');
    }
    if (args.qualifier !== undefined && args.qualifier !== null) {
      this.qualifier = args.qualifier;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field qualifier is unset!');
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!');
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = args.tags;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
TColumnValue.prototype = {};
TColumnValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.family = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.qualifier = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.tags = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BYTE) {
        this.type = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TColumnValue.prototype.write = function(output) {
  output.writeStructBegin('TColumnValue');
  if (this.family !== null && this.family !== undefined) {
    output.writeFieldBegin('family', Thrift.Type.STRING, 1);
    output.writeBinary(this.family);
    output.writeFieldEnd();
  }
  if (this.qualifier !== null && this.qualifier !== undefined) {
    output.writeFieldBegin('qualifier', Thrift.Type.STRING, 2);
    output.writeBinary(this.qualifier);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeBinary(this.value);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.STRING, 5);
    output.writeBinary(this.tags);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.BYTE, 6);
    output.writeByte(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TColumnIncrement = module.exports.TColumnIncrement = function(args) {
  this.family = null;
  this.qualifier = null;
  this.amount = 1;
  if (args) {
    if (args.family !== undefined && args.family !== null) {
      this.family = args.family;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field family is unset!');
    }
    if (args.qualifier !== undefined && args.qualifier !== null) {
      this.qualifier = args.qualifier;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field qualifier is unset!');
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = args.amount;
    }
  }
};
TColumnIncrement.prototype = {};
TColumnIncrement.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.family = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.qualifier = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.amount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TColumnIncrement.prototype.write = function(output) {
  output.writeStructBegin('TColumnIncrement');
  if (this.family !== null && this.family !== undefined) {
    output.writeFieldBegin('family', Thrift.Type.STRING, 1);
    output.writeBinary(this.family);
    output.writeFieldEnd();
  }
  if (this.qualifier !== null && this.qualifier !== undefined) {
    output.writeFieldBegin('qualifier', Thrift.Type.STRING, 2);
    output.writeBinary(this.qualifier);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.I64, 3);
    output.writeI64(this.amount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TResult = module.exports.TResult = function(args) {
  this.row = null;
  this.columnValues = null;
  this.stale = false;
  this.partial = false;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.columnValues !== undefined && args.columnValues !== null) {
      this.columnValues = Thrift.copyList(args.columnValues, [ttypes.TColumnValue]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field columnValues is unset!');
    }
    if (args.stale !== undefined && args.stale !== null) {
      this.stale = args.stale;
    }
    if (args.partial !== undefined && args.partial !== null) {
      this.partial = args.partial;
    }
  }
};
TResult.prototype = {};
TResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.columnValues = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new ttypes.TColumnValue();
          elem3.read(input);
          this.columnValues.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.stale = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.partial = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TResult.prototype.write = function(output) {
  output.writeStructBegin('TResult');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 1);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.columnValues !== null && this.columnValues !== undefined) {
    output.writeFieldBegin('columnValues', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.columnValues.length);
    for (var iter4 in this.columnValues) {
      if (this.columnValues.hasOwnProperty(iter4)) {
        iter4 = this.columnValues[iter4];
        iter4.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stale !== null && this.stale !== undefined) {
    output.writeFieldBegin('stale', Thrift.Type.BOOL, 3);
    output.writeBool(this.stale);
    output.writeFieldEnd();
  }
  if (this.partial !== null && this.partial !== undefined) {
    output.writeFieldBegin('partial', Thrift.Type.BOOL, 4);
    output.writeBool(this.partial);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TAuthorization = module.exports.TAuthorization = function(args) {
  this.labels = null;
  if (args) {
    if (args.labels !== undefined && args.labels !== null) {
      this.labels = Thrift.copyList(args.labels, [null]);
    }
  }
};
TAuthorization.prototype = {};
TAuthorization.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.labels = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = input.readString();
          this.labels.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAuthorization.prototype.write = function(output) {
  output.writeStructBegin('TAuthorization');
  if (this.labels !== null && this.labels !== undefined) {
    output.writeFieldBegin('labels', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.labels.length);
    for (var iter9 in this.labels) {
      if (this.labels.hasOwnProperty(iter9)) {
        iter9 = this.labels[iter9];
        output.writeString(iter9);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCellVisibility = module.exports.TCellVisibility = function(args) {
  this.expression = null;
  if (args) {
    if (args.expression !== undefined && args.expression !== null) {
      this.expression = args.expression;
    }
  }
};
TCellVisibility.prototype = {};
TCellVisibility.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.expression = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCellVisibility.prototype.write = function(output) {
  output.writeStructBegin('TCellVisibility');
  if (this.expression !== null && this.expression !== undefined) {
    output.writeFieldBegin('expression', Thrift.Type.STRING, 1);
    output.writeString(this.expression);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGet = module.exports.TGet = function(args) {
  this.row = null;
  this.columns = null;
  this.timestamp = null;
  this.timeRange = null;
  this.maxVersions = null;
  this.filterString = null;
  this.attributes = null;
  this.authorizations = null;
  this.consistency = null;
  this.targetReplicaId = null;
  this.cacheBlocks = null;
  this.storeLimit = null;
  this.storeOffset = null;
  this.existence_only = null;
  this.filterBytes = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field row is unset!');
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [ttypes.TColumn]);
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.timeRange !== undefined && args.timeRange !== null) {
      this.timeRange = new ttypes.TTimeRange(args.timeRange);
    }
    if (args.maxVersions !== undefined && args.maxVersions !== null) {
      this.maxVersions = args.maxVersions;
    }
    if (args.filterString !== undefined && args.filterString !== null) {
      this.filterString = args.filterString;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
    if (args.authorizations !== undefined && args.authorizations !== null) {
      this.authorizations = new ttypes.TAuthorization(args.authorizations);
    }
    if (args.consistency !== undefined && args.consistency !== null) {
      this.consistency = args.consistency;
    }
    if (args.targetReplicaId !== undefined && args.targetReplicaId !== null) {
      this.targetReplicaId = args.targetReplicaId;
    }
    if (args.cacheBlocks !== undefined && args.cacheBlocks !== null) {
      this.cacheBlocks = args.cacheBlocks;
    }
    if (args.storeLimit !== undefined && args.storeLimit !== null) {
      this.storeLimit = args.storeLimit;
    }
    if (args.storeOffset !== undefined && args.storeOffset !== null) {
      this.storeOffset = args.storeOffset;
    }
    if (args.existence_only !== undefined && args.existence_only !== null) {
      this.existence_only = args.existence_only;
    }
    if (args.filterBytes !== undefined && args.filterBytes !== null) {
      this.filterBytes = args.filterBytes;
    }
  }
};
TGet.prototype = {};
TGet.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.columns = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = new ttypes.TColumn();
          elem13.read(input);
          this.columns.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.timeRange = new ttypes.TTimeRange();
        this.timeRange.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.maxVersions = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.filterString = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp315 = input.readMapBegin();
        var _size14 = _rtmp315.size || 0;
        for (var _i16 = 0; _i16 < _size14; ++_i16) {
          var key17 = null;
          var val18 = null;
          key17 = input.readBinary();
          val18 = input.readBinary();
          this.attributes[key17] = val18;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorizations = new ttypes.TAuthorization();
        this.authorizations.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.consistency = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.targetReplicaId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.cacheBlocks = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.storeLimit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.storeOffset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.existence_only = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.filterBytes = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGet.prototype.write = function(output) {
  output.writeStructBegin('TGet');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 1);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter19 in this.columns) {
      if (this.columns.hasOwnProperty(iter19)) {
        iter19 = this.columns[iter19];
        iter19.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.timeRange !== null && this.timeRange !== undefined) {
    output.writeFieldBegin('timeRange', Thrift.Type.STRUCT, 4);
    this.timeRange.write(output);
    output.writeFieldEnd();
  }
  if (this.maxVersions !== null && this.maxVersions !== undefined) {
    output.writeFieldBegin('maxVersions', Thrift.Type.I32, 5);
    output.writeI32(this.maxVersions);
    output.writeFieldEnd();
  }
  if (this.filterString !== null && this.filterString !== undefined) {
    output.writeFieldBegin('filterString', Thrift.Type.STRING, 6);
    output.writeBinary(this.filterString);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter20 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter20)) {
        var viter21 = this.attributes[kiter20];
        output.writeBinary(kiter20);
        output.writeBinary(viter21);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.authorizations !== null && this.authorizations !== undefined) {
    output.writeFieldBegin('authorizations', Thrift.Type.STRUCT, 8);
    this.authorizations.write(output);
    output.writeFieldEnd();
  }
  if (this.consistency !== null && this.consistency !== undefined) {
    output.writeFieldBegin('consistency', Thrift.Type.I32, 9);
    output.writeI32(this.consistency);
    output.writeFieldEnd();
  }
  if (this.targetReplicaId !== null && this.targetReplicaId !== undefined) {
    output.writeFieldBegin('targetReplicaId', Thrift.Type.I32, 10);
    output.writeI32(this.targetReplicaId);
    output.writeFieldEnd();
  }
  if (this.cacheBlocks !== null && this.cacheBlocks !== undefined) {
    output.writeFieldBegin('cacheBlocks', Thrift.Type.BOOL, 11);
    output.writeBool(this.cacheBlocks);
    output.writeFieldEnd();
  }
  if (this.storeLimit !== null && this.storeLimit !== undefined) {
    output.writeFieldBegin('storeLimit', Thrift.Type.I32, 12);
    output.writeI32(this.storeLimit);
    output.writeFieldEnd();
  }
  if (this.storeOffset !== null && this.storeOffset !== undefined) {
    output.writeFieldBegin('storeOffset', Thrift.Type.I32, 13);
    output.writeI32(this.storeOffset);
    output.writeFieldEnd();
  }
  if (this.existence_only !== null && this.existence_only !== undefined) {
    output.writeFieldBegin('existence_only', Thrift.Type.BOOL, 14);
    output.writeBool(this.existence_only);
    output.writeFieldEnd();
  }
  if (this.filterBytes !== null && this.filterBytes !== undefined) {
    output.writeFieldBegin('filterBytes', Thrift.Type.STRING, 15);
    output.writeBinary(this.filterBytes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TPut = module.exports.TPut = function(args) {
  this.row = null;
  this.columnValues = null;
  this.timestamp = null;
  this.attributes = null;
  this.durability = null;
  this.cellVisibility = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field row is unset!');
    }
    if (args.columnValues !== undefined && args.columnValues !== null) {
      this.columnValues = Thrift.copyList(args.columnValues, [ttypes.TColumnValue]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field columnValues is unset!');
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
    if (args.durability !== undefined && args.durability !== null) {
      this.durability = args.durability;
    }
    if (args.cellVisibility !== undefined && args.cellVisibility !== null) {
      this.cellVisibility = new ttypes.TCellVisibility(args.cellVisibility);
    }
  }
};
TPut.prototype = {};
TPut.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.columnValues = [];
        var _rtmp323 = input.readListBegin();
        var _size22 = _rtmp323.size || 0;
        for (var _i24 = 0; _i24 < _size22; ++_i24) {
          var elem25 = null;
          elem25 = new ttypes.TColumnValue();
          elem25.read(input);
          this.columnValues.push(elem25);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp327 = input.readMapBegin();
        var _size26 = _rtmp327.size || 0;
        for (var _i28 = 0; _i28 < _size26; ++_i28) {
          var key29 = null;
          var val30 = null;
          key29 = input.readBinary();
          val30 = input.readBinary();
          this.attributes[key29] = val30;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.durability = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.cellVisibility = new ttypes.TCellVisibility();
        this.cellVisibility.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPut.prototype.write = function(output) {
  output.writeStructBegin('TPut');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 1);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.columnValues !== null && this.columnValues !== undefined) {
    output.writeFieldBegin('columnValues', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.columnValues.length);
    for (var iter31 in this.columnValues) {
      if (this.columnValues.hasOwnProperty(iter31)) {
        iter31 = this.columnValues[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter32 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter32)) {
        var viter33 = this.attributes[kiter32];
        output.writeBinary(kiter32);
        output.writeBinary(viter33);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.durability !== null && this.durability !== undefined) {
    output.writeFieldBegin('durability', Thrift.Type.I32, 6);
    output.writeI32(this.durability);
    output.writeFieldEnd();
  }
  if (this.cellVisibility !== null && this.cellVisibility !== undefined) {
    output.writeFieldBegin('cellVisibility', Thrift.Type.STRUCT, 7);
    this.cellVisibility.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TDelete = module.exports.TDelete = function(args) {
  this.row = null;
  this.columns = null;
  this.timestamp = null;
  this.deleteType = 1;
  this.attributes = null;
  this.durability = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field row is unset!');
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [ttypes.TColumn]);
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.deleteType !== undefined && args.deleteType !== null) {
      this.deleteType = args.deleteType;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
    if (args.durability !== undefined && args.durability !== null) {
      this.durability = args.durability;
    }
  }
};
TDelete.prototype = {};
TDelete.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.columns = [];
        var _rtmp335 = input.readListBegin();
        var _size34 = _rtmp335.size || 0;
        for (var _i36 = 0; _i36 < _size34; ++_i36) {
          var elem37 = null;
          elem37 = new ttypes.TColumn();
          elem37.read(input);
          this.columns.push(elem37);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.deleteType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp339 = input.readMapBegin();
        var _size38 = _rtmp339.size || 0;
        for (var _i40 = 0; _i40 < _size38; ++_i40) {
          var key41 = null;
          var val42 = null;
          key41 = input.readBinary();
          val42 = input.readBinary();
          this.attributes[key41] = val42;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.durability = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDelete.prototype.write = function(output) {
  output.writeStructBegin('TDelete');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 1);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter43 in this.columns) {
      if (this.columns.hasOwnProperty(iter43)) {
        iter43 = this.columns[iter43];
        iter43.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.deleteType !== null && this.deleteType !== undefined) {
    output.writeFieldBegin('deleteType', Thrift.Type.I32, 4);
    output.writeI32(this.deleteType);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter44 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter44)) {
        var viter45 = this.attributes[kiter44];
        output.writeBinary(kiter44);
        output.writeBinary(viter45);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.durability !== null && this.durability !== undefined) {
    output.writeFieldBegin('durability', Thrift.Type.I32, 7);
    output.writeI32(this.durability);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TIncrement = module.exports.TIncrement = function(args) {
  this.row = null;
  this.columns = null;
  this.attributes = null;
  this.durability = null;
  this.cellVisibility = null;
  this.returnResults = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field row is unset!');
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [ttypes.TColumnIncrement]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field columns is unset!');
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
    if (args.durability !== undefined && args.durability !== null) {
      this.durability = args.durability;
    }
    if (args.cellVisibility !== undefined && args.cellVisibility !== null) {
      this.cellVisibility = new ttypes.TCellVisibility(args.cellVisibility);
    }
    if (args.returnResults !== undefined && args.returnResults !== null) {
      this.returnResults = args.returnResults;
    }
  }
};
TIncrement.prototype = {};
TIncrement.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.columns = [];
        var _rtmp347 = input.readListBegin();
        var _size46 = _rtmp347.size || 0;
        for (var _i48 = 0; _i48 < _size46; ++_i48) {
          var elem49 = null;
          elem49 = new ttypes.TColumnIncrement();
          elem49.read(input);
          this.columns.push(elem49);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp351 = input.readMapBegin();
        var _size50 = _rtmp351.size || 0;
        for (var _i52 = 0; _i52 < _size50; ++_i52) {
          var key53 = null;
          var val54 = null;
          key53 = input.readBinary();
          val54 = input.readBinary();
          this.attributes[key53] = val54;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.durability = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.cellVisibility = new ttypes.TCellVisibility();
        this.cellVisibility.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.returnResults = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TIncrement.prototype.write = function(output) {
  output.writeStructBegin('TIncrement');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 1);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter55 in this.columns) {
      if (this.columns.hasOwnProperty(iter55)) {
        iter55 = this.columns[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter56 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter56)) {
        var viter57 = this.attributes[kiter56];
        output.writeBinary(kiter56);
        output.writeBinary(viter57);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.durability !== null && this.durability !== undefined) {
    output.writeFieldBegin('durability', Thrift.Type.I32, 5);
    output.writeI32(this.durability);
    output.writeFieldEnd();
  }
  if (this.cellVisibility !== null && this.cellVisibility !== undefined) {
    output.writeFieldBegin('cellVisibility', Thrift.Type.STRUCT, 6);
    this.cellVisibility.write(output);
    output.writeFieldEnd();
  }
  if (this.returnResults !== null && this.returnResults !== undefined) {
    output.writeFieldBegin('returnResults', Thrift.Type.BOOL, 7);
    output.writeBool(this.returnResults);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TAppend = module.exports.TAppend = function(args) {
  this.row = null;
  this.columns = null;
  this.attributes = null;
  this.durability = null;
  this.cellVisibility = null;
  this.returnResults = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field row is unset!');
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [ttypes.TColumnValue]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field columns is unset!');
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
    if (args.durability !== undefined && args.durability !== null) {
      this.durability = args.durability;
    }
    if (args.cellVisibility !== undefined && args.cellVisibility !== null) {
      this.cellVisibility = new ttypes.TCellVisibility(args.cellVisibility);
    }
    if (args.returnResults !== undefined && args.returnResults !== null) {
      this.returnResults = args.returnResults;
    }
  }
};
TAppend.prototype = {};
TAppend.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.columns = [];
        var _rtmp359 = input.readListBegin();
        var _size58 = _rtmp359.size || 0;
        for (var _i60 = 0; _i60 < _size58; ++_i60) {
          var elem61 = null;
          elem61 = new ttypes.TColumnValue();
          elem61.read(input);
          this.columns.push(elem61);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp363 = input.readMapBegin();
        var _size62 = _rtmp363.size || 0;
        for (var _i64 = 0; _i64 < _size62; ++_i64) {
          var key65 = null;
          var val66 = null;
          key65 = input.readBinary();
          val66 = input.readBinary();
          this.attributes[key65] = val66;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.durability = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.cellVisibility = new ttypes.TCellVisibility();
        this.cellVisibility.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.returnResults = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAppend.prototype.write = function(output) {
  output.writeStructBegin('TAppend');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 1);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter67 in this.columns) {
      if (this.columns.hasOwnProperty(iter67)) {
        iter67 = this.columns[iter67];
        iter67.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter68 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter68)) {
        var viter69 = this.attributes[kiter68];
        output.writeBinary(kiter68);
        output.writeBinary(viter69);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.durability !== null && this.durability !== undefined) {
    output.writeFieldBegin('durability', Thrift.Type.I32, 4);
    output.writeI32(this.durability);
    output.writeFieldEnd();
  }
  if (this.cellVisibility !== null && this.cellVisibility !== undefined) {
    output.writeFieldBegin('cellVisibility', Thrift.Type.STRUCT, 5);
    this.cellVisibility.write(output);
    output.writeFieldEnd();
  }
  if (this.returnResults !== null && this.returnResults !== undefined) {
    output.writeFieldBegin('returnResults', Thrift.Type.BOOL, 6);
    output.writeBool(this.returnResults);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TScan = module.exports.TScan = function(args) {
  this.startRow = null;
  this.stopRow = null;
  this.columns = null;
  this.caching = null;
  this.maxVersions = 1;
  this.timeRange = null;
  this.filterString = null;
  this.batchSize = null;
  this.attributes = null;
  this.authorizations = null;
  this.reversed = null;
  this.cacheBlocks = null;
  this.colFamTimeRangeMap = null;
  this.readType = null;
  this.limit = null;
  this.consistency = null;
  this.targetReplicaId = null;
  this.filterBytes = null;
  if (args) {
    if (args.startRow !== undefined && args.startRow !== null) {
      this.startRow = args.startRow;
    }
    if (args.stopRow !== undefined && args.stopRow !== null) {
      this.stopRow = args.stopRow;
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [ttypes.TColumn]);
    }
    if (args.caching !== undefined && args.caching !== null) {
      this.caching = args.caching;
    }
    if (args.maxVersions !== undefined && args.maxVersions !== null) {
      this.maxVersions = args.maxVersions;
    }
    if (args.timeRange !== undefined && args.timeRange !== null) {
      this.timeRange = new ttypes.TTimeRange(args.timeRange);
    }
    if (args.filterString !== undefined && args.filterString !== null) {
      this.filterString = args.filterString;
    }
    if (args.batchSize !== undefined && args.batchSize !== null) {
      this.batchSize = args.batchSize;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
    if (args.authorizations !== undefined && args.authorizations !== null) {
      this.authorizations = new ttypes.TAuthorization(args.authorizations);
    }
    if (args.reversed !== undefined && args.reversed !== null) {
      this.reversed = args.reversed;
    }
    if (args.cacheBlocks !== undefined && args.cacheBlocks !== null) {
      this.cacheBlocks = args.cacheBlocks;
    }
    if (args.colFamTimeRangeMap !== undefined && args.colFamTimeRangeMap !== null) {
      this.colFamTimeRangeMap = Thrift.copyMap(args.colFamTimeRangeMap, [ttypes.TTimeRange]);
    }
    if (args.readType !== undefined && args.readType !== null) {
      this.readType = args.readType;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.consistency !== undefined && args.consistency !== null) {
      this.consistency = args.consistency;
    }
    if (args.targetReplicaId !== undefined && args.targetReplicaId !== null) {
      this.targetReplicaId = args.targetReplicaId;
    }
    if (args.filterBytes !== undefined && args.filterBytes !== null) {
      this.filterBytes = args.filterBytes;
    }
  }
};
TScan.prototype = {};
TScan.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stopRow = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.columns = [];
        var _rtmp371 = input.readListBegin();
        var _size70 = _rtmp371.size || 0;
        for (var _i72 = 0; _i72 < _size70; ++_i72) {
          var elem73 = null;
          elem73 = new ttypes.TColumn();
          elem73.read(input);
          this.columns.push(elem73);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.caching = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.maxVersions = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.timeRange = new ttypes.TTimeRange();
        this.timeRange.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.filterString = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.batchSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp375 = input.readMapBegin();
        var _size74 = _rtmp375.size || 0;
        for (var _i76 = 0; _i76 < _size74; ++_i76) {
          var key77 = null;
          var val78 = null;
          key77 = input.readBinary();
          val78 = input.readBinary();
          this.attributes[key77] = val78;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.authorizations = new ttypes.TAuthorization();
        this.authorizations.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.reversed = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.cacheBlocks = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.MAP) {
        this.colFamTimeRangeMap = {};
        var _rtmp380 = input.readMapBegin();
        var _size79 = _rtmp380.size || 0;
        for (var _i81 = 0; _i81 < _size79; ++_i81) {
          var key82 = null;
          var val83 = null;
          key82 = input.readBinary();
          val83 = new ttypes.TTimeRange();
          val83.read(input);
          this.colFamTimeRangeMap[key82] = val83;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.readType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.consistency = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.targetReplicaId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.filterBytes = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TScan.prototype.write = function(output) {
  output.writeStructBegin('TScan');
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 1);
    output.writeBinary(this.startRow);
    output.writeFieldEnd();
  }
  if (this.stopRow !== null && this.stopRow !== undefined) {
    output.writeFieldBegin('stopRow', Thrift.Type.STRING, 2);
    output.writeBinary(this.stopRow);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter84 in this.columns) {
      if (this.columns.hasOwnProperty(iter84)) {
        iter84 = this.columns[iter84];
        iter84.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.caching !== null && this.caching !== undefined) {
    output.writeFieldBegin('caching', Thrift.Type.I32, 4);
    output.writeI32(this.caching);
    output.writeFieldEnd();
  }
  if (this.maxVersions !== null && this.maxVersions !== undefined) {
    output.writeFieldBegin('maxVersions', Thrift.Type.I32, 5);
    output.writeI32(this.maxVersions);
    output.writeFieldEnd();
  }
  if (this.timeRange !== null && this.timeRange !== undefined) {
    output.writeFieldBegin('timeRange', Thrift.Type.STRUCT, 6);
    this.timeRange.write(output);
    output.writeFieldEnd();
  }
  if (this.filterString !== null && this.filterString !== undefined) {
    output.writeFieldBegin('filterString', Thrift.Type.STRING, 7);
    output.writeBinary(this.filterString);
    output.writeFieldEnd();
  }
  if (this.batchSize !== null && this.batchSize !== undefined) {
    output.writeFieldBegin('batchSize', Thrift.Type.I32, 8);
    output.writeI32(this.batchSize);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter85 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter85)) {
        var viter86 = this.attributes[kiter85];
        output.writeBinary(kiter85);
        output.writeBinary(viter86);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.authorizations !== null && this.authorizations !== undefined) {
    output.writeFieldBegin('authorizations', Thrift.Type.STRUCT, 10);
    this.authorizations.write(output);
    output.writeFieldEnd();
  }
  if (this.reversed !== null && this.reversed !== undefined) {
    output.writeFieldBegin('reversed', Thrift.Type.BOOL, 11);
    output.writeBool(this.reversed);
    output.writeFieldEnd();
  }
  if (this.cacheBlocks !== null && this.cacheBlocks !== undefined) {
    output.writeFieldBegin('cacheBlocks', Thrift.Type.BOOL, 12);
    output.writeBool(this.cacheBlocks);
    output.writeFieldEnd();
  }
  if (this.colFamTimeRangeMap !== null && this.colFamTimeRangeMap !== undefined) {
    output.writeFieldBegin('colFamTimeRangeMap', Thrift.Type.MAP, 13);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.colFamTimeRangeMap));
    for (var kiter87 in this.colFamTimeRangeMap) {
      if (this.colFamTimeRangeMap.hasOwnProperty(kiter87)) {
        var viter88 = this.colFamTimeRangeMap[kiter87];
        output.writeBinary(kiter87);
        viter88.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.readType !== null && this.readType !== undefined) {
    output.writeFieldBegin('readType', Thrift.Type.I32, 14);
    output.writeI32(this.readType);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 15);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  if (this.consistency !== null && this.consistency !== undefined) {
    output.writeFieldBegin('consistency', Thrift.Type.I32, 16);
    output.writeI32(this.consistency);
    output.writeFieldEnd();
  }
  if (this.targetReplicaId !== null && this.targetReplicaId !== undefined) {
    output.writeFieldBegin('targetReplicaId', Thrift.Type.I32, 17);
    output.writeI32(this.targetReplicaId);
    output.writeFieldEnd();
  }
  if (this.filterBytes !== null && this.filterBytes !== undefined) {
    output.writeFieldBegin('filterBytes', Thrift.Type.STRING, 18);
    output.writeBinary(this.filterBytes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TMutation = module.exports.TMutation = function(args) {
  this.put = null;
  this.deleteSingle = null;
  if (args) {
    if (args.put !== undefined && args.put !== null) {
      this.put = new ttypes.TPut(args.put);
    }
    if (args.deleteSingle !== undefined && args.deleteSingle !== null) {
      this.deleteSingle = new ttypes.TDelete(args.deleteSingle);
    }
  }
};
TMutation.prototype = {};
TMutation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.put = new ttypes.TPut();
        this.put.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteSingle = new ttypes.TDelete();
        this.deleteSingle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMutation.prototype.write = function(output) {
  output.writeStructBegin('TMutation');
  if (this.put !== null && this.put !== undefined) {
    output.writeFieldBegin('put', Thrift.Type.STRUCT, 1);
    this.put.write(output);
    output.writeFieldEnd();
  }
  if (this.deleteSingle !== null && this.deleteSingle !== undefined) {
    output.writeFieldBegin('deleteSingle', Thrift.Type.STRUCT, 2);
    this.deleteSingle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TRowMutations = module.exports.TRowMutations = function(args) {
  this.row = null;
  this.mutations = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field row is unset!');
    }
    if (args.mutations !== undefined && args.mutations !== null) {
      this.mutations = Thrift.copyList(args.mutations, [ttypes.TMutation]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field mutations is unset!');
    }
  }
};
TRowMutations.prototype = {};
TRowMutations.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.mutations = [];
        var _rtmp390 = input.readListBegin();
        var _size89 = _rtmp390.size || 0;
        for (var _i91 = 0; _i91 < _size89; ++_i91) {
          var elem92 = null;
          elem92 = new ttypes.TMutation();
          elem92.read(input);
          this.mutations.push(elem92);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRowMutations.prototype.write = function(output) {
  output.writeStructBegin('TRowMutations');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 1);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.mutations !== null && this.mutations !== undefined) {
    output.writeFieldBegin('mutations', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.mutations.length);
    for (var iter93 in this.mutations) {
      if (this.mutations.hasOwnProperty(iter93)) {
        iter93 = this.mutations[iter93];
        iter93.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THRegionInfo = module.exports.THRegionInfo = function(args) {
  this.regionId = null;
  this.tableName = null;
  this.startKey = null;
  this.endKey = null;
  this.offline = null;
  this.split = null;
  this.replicaId = null;
  if (args) {
    if (args.regionId !== undefined && args.regionId !== null) {
      this.regionId = args.regionId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field regionId is unset!');
    }
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tableName is unset!');
    }
    if (args.startKey !== undefined && args.startKey !== null) {
      this.startKey = args.startKey;
    }
    if (args.endKey !== undefined && args.endKey !== null) {
      this.endKey = args.endKey;
    }
    if (args.offline !== undefined && args.offline !== null) {
      this.offline = args.offline;
    }
    if (args.split !== undefined && args.split !== null) {
      this.split = args.split;
    }
    if (args.replicaId !== undefined && args.replicaId !== null) {
      this.replicaId = args.replicaId;
    }
  }
};
THRegionInfo.prototype = {};
THRegionInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.regionId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.startKey = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.endKey = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.offline = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.split = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.replicaId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THRegionInfo.prototype.write = function(output) {
  output.writeStructBegin('THRegionInfo');
  if (this.regionId !== null && this.regionId !== undefined) {
    output.writeFieldBegin('regionId', Thrift.Type.I64, 1);
    output.writeI64(this.regionId);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startKey !== null && this.startKey !== undefined) {
    output.writeFieldBegin('startKey', Thrift.Type.STRING, 3);
    output.writeBinary(this.startKey);
    output.writeFieldEnd();
  }
  if (this.endKey !== null && this.endKey !== undefined) {
    output.writeFieldBegin('endKey', Thrift.Type.STRING, 4);
    output.writeBinary(this.endKey);
    output.writeFieldEnd();
  }
  if (this.offline !== null && this.offline !== undefined) {
    output.writeFieldBegin('offline', Thrift.Type.BOOL, 5);
    output.writeBool(this.offline);
    output.writeFieldEnd();
  }
  if (this.split !== null && this.split !== undefined) {
    output.writeFieldBegin('split', Thrift.Type.BOOL, 6);
    output.writeBool(this.split);
    output.writeFieldEnd();
  }
  if (this.replicaId !== null && this.replicaId !== undefined) {
    output.writeFieldBegin('replicaId', Thrift.Type.I32, 7);
    output.writeI32(this.replicaId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TServerName = module.exports.TServerName = function(args) {
  this.hostName = null;
  this.port = null;
  this.startCode = null;
  if (args) {
    if (args.hostName !== undefined && args.hostName !== null) {
      this.hostName = args.hostName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hostName is unset!');
    }
    if (args.port !== undefined && args.port !== null) {
      this.port = args.port;
    }
    if (args.startCode !== undefined && args.startCode !== null) {
      this.startCode = args.startCode;
    }
  }
};
TServerName.prototype = {};
TServerName.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hostName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.startCode = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TServerName.prototype.write = function(output) {
  output.writeStructBegin('TServerName');
  if (this.hostName !== null && this.hostName !== undefined) {
    output.writeFieldBegin('hostName', Thrift.Type.STRING, 1);
    output.writeString(this.hostName);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 2);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  if (this.startCode !== null && this.startCode !== undefined) {
    output.writeFieldBegin('startCode', Thrift.Type.I64, 3);
    output.writeI64(this.startCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THRegionLocation = module.exports.THRegionLocation = function(args) {
  this.serverName = null;
  this.regionInfo = null;
  if (args) {
    if (args.serverName !== undefined && args.serverName !== null) {
      this.serverName = new ttypes.TServerName(args.serverName);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field serverName is unset!');
    }
    if (args.regionInfo !== undefined && args.regionInfo !== null) {
      this.regionInfo = new ttypes.THRegionInfo(args.regionInfo);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field regionInfo is unset!');
    }
  }
};
THRegionLocation.prototype = {};
THRegionLocation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serverName = new ttypes.TServerName();
        this.serverName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.regionInfo = new ttypes.THRegionInfo();
        this.regionInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THRegionLocation.prototype.write = function(output) {
  output.writeStructBegin('THRegionLocation');
  if (this.serverName !== null && this.serverName !== undefined) {
    output.writeFieldBegin('serverName', Thrift.Type.STRUCT, 1);
    this.serverName.write(output);
    output.writeFieldEnd();
  }
  if (this.regionInfo !== null && this.regionInfo !== undefined) {
    output.writeFieldBegin('regionInfo', Thrift.Type.STRUCT, 2);
    this.regionInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TTableName = module.exports.TTableName = function(args) {
  this.ns = null;
  this.qualifier = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.qualifier !== undefined && args.qualifier !== null) {
      this.qualifier = args.qualifier;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field qualifier is unset!');
    }
  }
};
TTableName.prototype = {};
TTableName.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.qualifier = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTableName.prototype.write = function(output) {
  output.writeStructBegin('TTableName');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeBinary(this.ns);
    output.writeFieldEnd();
  }
  if (this.qualifier !== null && this.qualifier !== undefined) {
    output.writeFieldBegin('qualifier', Thrift.Type.STRING, 2);
    output.writeBinary(this.qualifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TColumnFamilyDescriptor = module.exports.TColumnFamilyDescriptor = function(args) {
  this.name = null;
  this.attributes = null;
  this.configuration = null;
  this.blockSize = null;
  this.bloomnFilterType = null;
  this.compressionType = null;
  this.dfsReplication = null;
  this.dataBlockEncoding = null;
  this.keepDeletedCells = null;
  this.maxVersions = null;
  this.minVersions = null;
  this.scope = null;
  this.timeToLive = null;
  this.blockCacheEnabled = null;
  this.cacheBloomsOnWrite = null;
  this.cacheDataOnWrite = null;
  this.cacheIndexesOnWrite = null;
  this.compressTags = null;
  this.evictBlocksOnClose = null;
  this.inMemory = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
    if (args.configuration !== undefined && args.configuration !== null) {
      this.configuration = Thrift.copyMap(args.configuration, [null]);
    }
    if (args.blockSize !== undefined && args.blockSize !== null) {
      this.blockSize = args.blockSize;
    }
    if (args.bloomnFilterType !== undefined && args.bloomnFilterType !== null) {
      this.bloomnFilterType = args.bloomnFilterType;
    }
    if (args.compressionType !== undefined && args.compressionType !== null) {
      this.compressionType = args.compressionType;
    }
    if (args.dfsReplication !== undefined && args.dfsReplication !== null) {
      this.dfsReplication = args.dfsReplication;
    }
    if (args.dataBlockEncoding !== undefined && args.dataBlockEncoding !== null) {
      this.dataBlockEncoding = args.dataBlockEncoding;
    }
    if (args.keepDeletedCells !== undefined && args.keepDeletedCells !== null) {
      this.keepDeletedCells = args.keepDeletedCells;
    }
    if (args.maxVersions !== undefined && args.maxVersions !== null) {
      this.maxVersions = args.maxVersions;
    }
    if (args.minVersions !== undefined && args.minVersions !== null) {
      this.minVersions = args.minVersions;
    }
    if (args.scope !== undefined && args.scope !== null) {
      this.scope = args.scope;
    }
    if (args.timeToLive !== undefined && args.timeToLive !== null) {
      this.timeToLive = args.timeToLive;
    }
    if (args.blockCacheEnabled !== undefined && args.blockCacheEnabled !== null) {
      this.blockCacheEnabled = args.blockCacheEnabled;
    }
    if (args.cacheBloomsOnWrite !== undefined && args.cacheBloomsOnWrite !== null) {
      this.cacheBloomsOnWrite = args.cacheBloomsOnWrite;
    }
    if (args.cacheDataOnWrite !== undefined && args.cacheDataOnWrite !== null) {
      this.cacheDataOnWrite = args.cacheDataOnWrite;
    }
    if (args.cacheIndexesOnWrite !== undefined && args.cacheIndexesOnWrite !== null) {
      this.cacheIndexesOnWrite = args.cacheIndexesOnWrite;
    }
    if (args.compressTags !== undefined && args.compressTags !== null) {
      this.compressTags = args.compressTags;
    }
    if (args.evictBlocksOnClose !== undefined && args.evictBlocksOnClose !== null) {
      this.evictBlocksOnClose = args.evictBlocksOnClose;
    }
    if (args.inMemory !== undefined && args.inMemory !== null) {
      this.inMemory = args.inMemory;
    }
  }
};
TColumnFamilyDescriptor.prototype = {};
TColumnFamilyDescriptor.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp395 = input.readMapBegin();
        var _size94 = _rtmp395.size || 0;
        for (var _i96 = 0; _i96 < _size94; ++_i96) {
          var key97 = null;
          var val98 = null;
          key97 = input.readBinary();
          val98 = input.readBinary();
          this.attributes[key97] = val98;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.configuration = {};
        var _rtmp3100 = input.readMapBegin();
        var _size99 = _rtmp3100.size || 0;
        for (var _i101 = 0; _i101 < _size99; ++_i101) {
          var key102 = null;
          var val103 = null;
          key102 = input.readString();
          val103 = input.readString();
          this.configuration[key102] = val103;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.blockSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.bloomnFilterType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.compressionType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I16) {
        this.dfsReplication = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.dataBlockEncoding = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.keepDeletedCells = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.maxVersions = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.minVersions = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.timeToLive = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.blockCacheEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.cacheBloomsOnWrite = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BOOL) {
        this.cacheDataOnWrite = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.BOOL) {
        this.cacheIndexesOnWrite = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.BOOL) {
        this.compressTags = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.BOOL) {
        this.evictBlocksOnClose = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.inMemory = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TColumnFamilyDescriptor.prototype.write = function(output) {
  output.writeStructBegin('TColumnFamilyDescriptor');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeBinary(this.name);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter104 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter104)) {
        var viter105 = this.attributes[kiter104];
        output.writeBinary(kiter104);
        output.writeBinary(viter105);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.configuration !== null && this.configuration !== undefined) {
    output.writeFieldBegin('configuration', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.configuration));
    for (var kiter106 in this.configuration) {
      if (this.configuration.hasOwnProperty(kiter106)) {
        var viter107 = this.configuration[kiter106];
        output.writeString(kiter106);
        output.writeString(viter107);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.blockSize !== null && this.blockSize !== undefined) {
    output.writeFieldBegin('blockSize', Thrift.Type.I32, 4);
    output.writeI32(this.blockSize);
    output.writeFieldEnd();
  }
  if (this.bloomnFilterType !== null && this.bloomnFilterType !== undefined) {
    output.writeFieldBegin('bloomnFilterType', Thrift.Type.I32, 5);
    output.writeI32(this.bloomnFilterType);
    output.writeFieldEnd();
  }
  if (this.compressionType !== null && this.compressionType !== undefined) {
    output.writeFieldBegin('compressionType', Thrift.Type.I32, 6);
    output.writeI32(this.compressionType);
    output.writeFieldEnd();
  }
  if (this.dfsReplication !== null && this.dfsReplication !== undefined) {
    output.writeFieldBegin('dfsReplication', Thrift.Type.I16, 7);
    output.writeI16(this.dfsReplication);
    output.writeFieldEnd();
  }
  if (this.dataBlockEncoding !== null && this.dataBlockEncoding !== undefined) {
    output.writeFieldBegin('dataBlockEncoding', Thrift.Type.I32, 8);
    output.writeI32(this.dataBlockEncoding);
    output.writeFieldEnd();
  }
  if (this.keepDeletedCells !== null && this.keepDeletedCells !== undefined) {
    output.writeFieldBegin('keepDeletedCells', Thrift.Type.I32, 9);
    output.writeI32(this.keepDeletedCells);
    output.writeFieldEnd();
  }
  if (this.maxVersions !== null && this.maxVersions !== undefined) {
    output.writeFieldBegin('maxVersions', Thrift.Type.I32, 10);
    output.writeI32(this.maxVersions);
    output.writeFieldEnd();
  }
  if (this.minVersions !== null && this.minVersions !== undefined) {
    output.writeFieldBegin('minVersions', Thrift.Type.I32, 11);
    output.writeI32(this.minVersions);
    output.writeFieldEnd();
  }
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 12);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  if (this.timeToLive !== null && this.timeToLive !== undefined) {
    output.writeFieldBegin('timeToLive', Thrift.Type.I32, 13);
    output.writeI32(this.timeToLive);
    output.writeFieldEnd();
  }
  if (this.blockCacheEnabled !== null && this.blockCacheEnabled !== undefined) {
    output.writeFieldBegin('blockCacheEnabled', Thrift.Type.BOOL, 14);
    output.writeBool(this.blockCacheEnabled);
    output.writeFieldEnd();
  }
  if (this.cacheBloomsOnWrite !== null && this.cacheBloomsOnWrite !== undefined) {
    output.writeFieldBegin('cacheBloomsOnWrite', Thrift.Type.BOOL, 15);
    output.writeBool(this.cacheBloomsOnWrite);
    output.writeFieldEnd();
  }
  if (this.cacheDataOnWrite !== null && this.cacheDataOnWrite !== undefined) {
    output.writeFieldBegin('cacheDataOnWrite', Thrift.Type.BOOL, 16);
    output.writeBool(this.cacheDataOnWrite);
    output.writeFieldEnd();
  }
  if (this.cacheIndexesOnWrite !== null && this.cacheIndexesOnWrite !== undefined) {
    output.writeFieldBegin('cacheIndexesOnWrite', Thrift.Type.BOOL, 17);
    output.writeBool(this.cacheIndexesOnWrite);
    output.writeFieldEnd();
  }
  if (this.compressTags !== null && this.compressTags !== undefined) {
    output.writeFieldBegin('compressTags', Thrift.Type.BOOL, 18);
    output.writeBool(this.compressTags);
    output.writeFieldEnd();
  }
  if (this.evictBlocksOnClose !== null && this.evictBlocksOnClose !== undefined) {
    output.writeFieldBegin('evictBlocksOnClose', Thrift.Type.BOOL, 19);
    output.writeBool(this.evictBlocksOnClose);
    output.writeFieldEnd();
  }
  if (this.inMemory !== null && this.inMemory !== undefined) {
    output.writeFieldBegin('inMemory', Thrift.Type.BOOL, 20);
    output.writeBool(this.inMemory);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TTableDescriptor = module.exports.TTableDescriptor = function(args) {
  this.tableName = null;
  this.columns = null;
  this.attributes = null;
  this.durability = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = new ttypes.TTableName(args.tableName);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tableName is unset!');
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [ttypes.TColumnFamilyDescriptor]);
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyMap(args.attributes, [null]);
    }
    if (args.durability !== undefined && args.durability !== null) {
      this.durability = args.durability;
    }
  }
};
TTableDescriptor.prototype = {};
TTableDescriptor.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableName = new ttypes.TTableName();
        this.tableName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.columns = [];
        var _rtmp3109 = input.readListBegin();
        var _size108 = _rtmp3109.size || 0;
        for (var _i110 = 0; _i110 < _size108; ++_i110) {
          var elem111 = null;
          elem111 = new ttypes.TColumnFamilyDescriptor();
          elem111.read(input);
          this.columns.push(elem111);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.attributes = {};
        var _rtmp3113 = input.readMapBegin();
        var _size112 = _rtmp3113.size || 0;
        for (var _i114 = 0; _i114 < _size112; ++_i114) {
          var key115 = null;
          var val116 = null;
          key115 = input.readBinary();
          val116 = input.readBinary();
          this.attributes[key115] = val116;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.durability = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTableDescriptor.prototype.write = function(output) {
  output.writeStructBegin('TTableDescriptor');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRUCT, 1);
    this.tableName.write(output);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter117 in this.columns) {
      if (this.columns.hasOwnProperty(iter117)) {
        iter117 = this.columns[iter117];
        iter117.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter118 in this.attributes) {
      if (this.attributes.hasOwnProperty(kiter118)) {
        var viter119 = this.attributes[kiter118];
        output.writeBinary(kiter118);
        output.writeBinary(viter119);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.durability !== null && this.durability !== undefined) {
    output.writeFieldBegin('durability', Thrift.Type.I32, 4);
    output.writeI32(this.durability);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TNamespaceDescriptor = module.exports.TNamespaceDescriptor = function(args) {
  this.name = null;
  this.configuration = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.configuration !== undefined && args.configuration !== null) {
      this.configuration = Thrift.copyMap(args.configuration, [null]);
    }
  }
};
TNamespaceDescriptor.prototype = {};
TNamespaceDescriptor.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.configuration = {};
        var _rtmp3121 = input.readMapBegin();
        var _size120 = _rtmp3121.size || 0;
        for (var _i122 = 0; _i122 < _size120; ++_i122) {
          var key123 = null;
          var val124 = null;
          key123 = input.readString();
          val124 = input.readString();
          this.configuration[key123] = val124;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TNamespaceDescriptor.prototype.write = function(output) {
  output.writeStructBegin('TNamespaceDescriptor');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.configuration !== null && this.configuration !== undefined) {
    output.writeFieldBegin('configuration', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.configuration));
    for (var kiter125 in this.configuration) {
      if (this.configuration.hasOwnProperty(kiter125)) {
        var viter126 = this.configuration[kiter125];
        output.writeString(kiter125);
        output.writeString(viter126);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TIOError = module.exports.TIOError = function(args) {
  Thrift.TException.call(this, "TIOError");
  this.name = "TIOError";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(TIOError, Thrift.TException);
TIOError.prototype.name = 'TIOError';
TIOError.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TIOError.prototype.write = function(output) {
  output.writeStructBegin('TIOError');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TIllegalArgument = module.exports.TIllegalArgument = function(args) {
  Thrift.TException.call(this, "TIllegalArgument");
  this.name = "TIllegalArgument";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(TIllegalArgument, Thrift.TException);
TIllegalArgument.prototype.name = 'TIllegalArgument';
TIllegalArgument.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TIllegalArgument.prototype.write = function(output) {
  output.writeStructBegin('TIllegalArgument');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

