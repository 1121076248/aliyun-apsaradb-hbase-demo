//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./hbase_types');
//HELPER FUNCTIONS AND STRUCTURES

var THBaseService_exists_args = function(args) {
  this.table = null;
  this.tget = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.tget !== undefined && args.tget !== null) {
      this.tget = new ttypes.TGet(args.tget);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tget is unset!');
    }
  }
};
THBaseService_exists_args.prototype = {};
THBaseService_exists_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tget = new ttypes.TGet();
        this.tget.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_exists_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_exists_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.tget !== null && this.tget !== undefined) {
    output.writeFieldBegin('tget', Thrift.Type.STRUCT, 2);
    this.tget.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_exists_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_exists_result.prototype = {};
THBaseService_exists_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_exists_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_exists_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_existsAll_args = function(args) {
  this.table = null;
  this.tgets = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.tgets !== undefined && args.tgets !== null) {
      this.tgets = Thrift.copyList(args.tgets, [ttypes.TGet]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tgets is unset!');
    }
  }
};
THBaseService_existsAll_args.prototype = {};
THBaseService_existsAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.tgets = [];
        var _rtmp3128 = input.readListBegin();
        var _size127 = _rtmp3128.size || 0;
        for (var _i129 = 0; _i129 < _size127; ++_i129) {
          var elem130 = null;
          elem130 = new ttypes.TGet();
          elem130.read(input);
          this.tgets.push(elem130);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_existsAll_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_existsAll_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.tgets !== null && this.tgets !== undefined) {
    output.writeFieldBegin('tgets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.tgets.length);
    for (var iter131 in this.tgets) {
      if (this.tgets.hasOwnProperty(iter131)) {
        iter131 = this.tgets[iter131];
        iter131.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_existsAll_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_existsAll_result.prototype = {};
THBaseService_existsAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3133 = input.readListBegin();
        var _size132 = _rtmp3133.size || 0;
        for (var _i134 = 0; _i134 < _size132; ++_i134) {
          var elem135 = null;
          elem135 = input.readBool();
          this.success.push(elem135);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_existsAll_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_existsAll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.BOOL, this.success.length);
    for (var iter136 in this.success) {
      if (this.success.hasOwnProperty(iter136)) {
        iter136 = this.success[iter136];
        output.writeBool(iter136);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_get_args = function(args) {
  this.table = null;
  this.tget = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.tget !== undefined && args.tget !== null) {
      this.tget = new ttypes.TGet(args.tget);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tget is unset!');
    }
  }
};
THBaseService_get_args.prototype = {};
THBaseService_get_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tget = new ttypes.TGet();
        this.tget.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_get_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_get_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.tget !== null && this.tget !== undefined) {
    output.writeFieldBegin('tget', Thrift.Type.STRUCT, 2);
    this.tget.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_get_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TResult(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_get_result.prototype = {};
THBaseService_get_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_get_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_get_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getMultiple_args = function(args) {
  this.table = null;
  this.tgets = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.tgets !== undefined && args.tgets !== null) {
      this.tgets = Thrift.copyList(args.tgets, [ttypes.TGet]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tgets is unset!');
    }
  }
};
THBaseService_getMultiple_args.prototype = {};
THBaseService_getMultiple_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.tgets = [];
        var _rtmp3138 = input.readListBegin();
        var _size137 = _rtmp3138.size || 0;
        for (var _i139 = 0; _i139 < _size137; ++_i139) {
          var elem140 = null;
          elem140 = new ttypes.TGet();
          elem140.read(input);
          this.tgets.push(elem140);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getMultiple_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getMultiple_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.tgets !== null && this.tgets !== undefined) {
    output.writeFieldBegin('tgets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.tgets.length);
    for (var iter141 in this.tgets) {
      if (this.tgets.hasOwnProperty(iter141)) {
        iter141 = this.tgets[iter141];
        iter141.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getMultiple_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TResult]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_getMultiple_result.prototype = {};
THBaseService_getMultiple_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3143 = input.readListBegin();
        var _size142 = _rtmp3143.size || 0;
        for (var _i144 = 0; _i144 < _size142; ++_i144) {
          var elem145 = null;
          elem145 = new ttypes.TResult();
          elem145.read(input);
          this.success.push(elem145);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getMultiple_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getMultiple_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter146 in this.success) {
      if (this.success.hasOwnProperty(iter146)) {
        iter146 = this.success[iter146];
        iter146.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_put_args = function(args) {
  this.table = null;
  this.tput = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.tput !== undefined && args.tput !== null) {
      this.tput = new ttypes.TPut(args.tput);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tput is unset!');
    }
  }
};
THBaseService_put_args.prototype = {};
THBaseService_put_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tput = new ttypes.TPut();
        this.tput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_put_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_put_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.tput !== null && this.tput !== undefined) {
    output.writeFieldBegin('tput', Thrift.Type.STRUCT, 2);
    this.tput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_put_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_put_result.prototype = {};
THBaseService_put_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_put_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_put_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_checkAndPut_args = function(args) {
  this.table = null;
  this.row = null;
  this.family = null;
  this.qualifier = null;
  this.value = null;
  this.tput = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field row is unset!');
    }
    if (args.family !== undefined && args.family !== null) {
      this.family = args.family;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field family is unset!');
    }
    if (args.qualifier !== undefined && args.qualifier !== null) {
      this.qualifier = args.qualifier;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field qualifier is unset!');
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.tput !== undefined && args.tput !== null) {
      this.tput = new ttypes.TPut(args.tput);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tput is unset!');
    }
  }
};
THBaseService_checkAndPut_args.prototype = {};
THBaseService_checkAndPut_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.family = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.qualifier = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.tput = new ttypes.TPut();
        this.tput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_checkAndPut_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_checkAndPut_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.family !== null && this.family !== undefined) {
    output.writeFieldBegin('family', Thrift.Type.STRING, 3);
    output.writeBinary(this.family);
    output.writeFieldEnd();
  }
  if (this.qualifier !== null && this.qualifier !== undefined) {
    output.writeFieldBegin('qualifier', Thrift.Type.STRING, 4);
    output.writeBinary(this.qualifier);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 5);
    output.writeBinary(this.value);
    output.writeFieldEnd();
  }
  if (this.tput !== null && this.tput !== undefined) {
    output.writeFieldBegin('tput', Thrift.Type.STRUCT, 6);
    this.tput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_checkAndPut_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_checkAndPut_result.prototype = {};
THBaseService_checkAndPut_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_checkAndPut_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_checkAndPut_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_putMultiple_args = function(args) {
  this.table = null;
  this.tputs = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.tputs !== undefined && args.tputs !== null) {
      this.tputs = Thrift.copyList(args.tputs, [ttypes.TPut]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tputs is unset!');
    }
  }
};
THBaseService_putMultiple_args.prototype = {};
THBaseService_putMultiple_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.tputs = [];
        var _rtmp3148 = input.readListBegin();
        var _size147 = _rtmp3148.size || 0;
        for (var _i149 = 0; _i149 < _size147; ++_i149) {
          var elem150 = null;
          elem150 = new ttypes.TPut();
          elem150.read(input);
          this.tputs.push(elem150);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_putMultiple_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_putMultiple_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.tputs !== null && this.tputs !== undefined) {
    output.writeFieldBegin('tputs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.tputs.length);
    for (var iter151 in this.tputs) {
      if (this.tputs.hasOwnProperty(iter151)) {
        iter151 = this.tputs[iter151];
        iter151.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_putMultiple_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_putMultiple_result.prototype = {};
THBaseService_putMultiple_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_putMultiple_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_putMultiple_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_deleteSingle_args = function(args) {
  this.table = null;
  this.tdelete = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.tdelete !== undefined && args.tdelete !== null) {
      this.tdelete = new ttypes.TDelete(args.tdelete);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tdelete is unset!');
    }
  }
};
THBaseService_deleteSingle_args.prototype = {};
THBaseService_deleteSingle_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tdelete = new ttypes.TDelete();
        this.tdelete.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_deleteSingle_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_deleteSingle_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.tdelete !== null && this.tdelete !== undefined) {
    output.writeFieldBegin('tdelete', Thrift.Type.STRUCT, 2);
    this.tdelete.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_deleteSingle_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_deleteSingle_result.prototype = {};
THBaseService_deleteSingle_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_deleteSingle_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_deleteSingle_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_deleteMultiple_args = function(args) {
  this.table = null;
  this.tdeletes = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.tdeletes !== undefined && args.tdeletes !== null) {
      this.tdeletes = Thrift.copyList(args.tdeletes, [ttypes.TDelete]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tdeletes is unset!');
    }
  }
};
THBaseService_deleteMultiple_args.prototype = {};
THBaseService_deleteMultiple_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.tdeletes = [];
        var _rtmp3153 = input.readListBegin();
        var _size152 = _rtmp3153.size || 0;
        for (var _i154 = 0; _i154 < _size152; ++_i154) {
          var elem155 = null;
          elem155 = new ttypes.TDelete();
          elem155.read(input);
          this.tdeletes.push(elem155);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_deleteMultiple_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_deleteMultiple_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.tdeletes !== null && this.tdeletes !== undefined) {
    output.writeFieldBegin('tdeletes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.tdeletes.length);
    for (var iter156 in this.tdeletes) {
      if (this.tdeletes.hasOwnProperty(iter156)) {
        iter156 = this.tdeletes[iter156];
        iter156.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_deleteMultiple_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TDelete]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_deleteMultiple_result.prototype = {};
THBaseService_deleteMultiple_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3158 = input.readListBegin();
        var _size157 = _rtmp3158.size || 0;
        for (var _i159 = 0; _i159 < _size157; ++_i159) {
          var elem160 = null;
          elem160 = new ttypes.TDelete();
          elem160.read(input);
          this.success.push(elem160);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_deleteMultiple_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_deleteMultiple_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter161 in this.success) {
      if (this.success.hasOwnProperty(iter161)) {
        iter161 = this.success[iter161];
        iter161.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_checkAndDelete_args = function(args) {
  this.table = null;
  this.row = null;
  this.family = null;
  this.qualifier = null;
  this.value = null;
  this.tdelete = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field row is unset!');
    }
    if (args.family !== undefined && args.family !== null) {
      this.family = args.family;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field family is unset!');
    }
    if (args.qualifier !== undefined && args.qualifier !== null) {
      this.qualifier = args.qualifier;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field qualifier is unset!');
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.tdelete !== undefined && args.tdelete !== null) {
      this.tdelete = new ttypes.TDelete(args.tdelete);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tdelete is unset!');
    }
  }
};
THBaseService_checkAndDelete_args.prototype = {};
THBaseService_checkAndDelete_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.family = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.qualifier = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.tdelete = new ttypes.TDelete();
        this.tdelete.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_checkAndDelete_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_checkAndDelete_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.family !== null && this.family !== undefined) {
    output.writeFieldBegin('family', Thrift.Type.STRING, 3);
    output.writeBinary(this.family);
    output.writeFieldEnd();
  }
  if (this.qualifier !== null && this.qualifier !== undefined) {
    output.writeFieldBegin('qualifier', Thrift.Type.STRING, 4);
    output.writeBinary(this.qualifier);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 5);
    output.writeBinary(this.value);
    output.writeFieldEnd();
  }
  if (this.tdelete !== null && this.tdelete !== undefined) {
    output.writeFieldBegin('tdelete', Thrift.Type.STRUCT, 6);
    this.tdelete.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_checkAndDelete_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_checkAndDelete_result.prototype = {};
THBaseService_checkAndDelete_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_checkAndDelete_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_checkAndDelete_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_increment_args = function(args) {
  this.table = null;
  this.tincrement = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.tincrement !== undefined && args.tincrement !== null) {
      this.tincrement = new ttypes.TIncrement(args.tincrement);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tincrement is unset!');
    }
  }
};
THBaseService_increment_args.prototype = {};
THBaseService_increment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tincrement = new ttypes.TIncrement();
        this.tincrement.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_increment_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_increment_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.tincrement !== null && this.tincrement !== undefined) {
    output.writeFieldBegin('tincrement', Thrift.Type.STRUCT, 2);
    this.tincrement.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_increment_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TResult(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_increment_result.prototype = {};
THBaseService_increment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_increment_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_increment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_append_args = function(args) {
  this.table = null;
  this.tappend = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.tappend !== undefined && args.tappend !== null) {
      this.tappend = new ttypes.TAppend(args.tappend);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tappend is unset!');
    }
  }
};
THBaseService_append_args.prototype = {};
THBaseService_append_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tappend = new ttypes.TAppend();
        this.tappend.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_append_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_append_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.tappend !== null && this.tappend !== undefined) {
    output.writeFieldBegin('tappend', Thrift.Type.STRUCT, 2);
    this.tappend.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_append_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TResult(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_append_result.prototype = {};
THBaseService_append_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_append_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_append_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_openScanner_args = function(args) {
  this.table = null;
  this.tscan = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.tscan !== undefined && args.tscan !== null) {
      this.tscan = new ttypes.TScan(args.tscan);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tscan is unset!');
    }
  }
};
THBaseService_openScanner_args.prototype = {};
THBaseService_openScanner_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tscan = new ttypes.TScan();
        this.tscan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_openScanner_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_openScanner_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.tscan !== null && this.tscan !== undefined) {
    output.writeFieldBegin('tscan', Thrift.Type.STRUCT, 2);
    this.tscan.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_openScanner_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_openScanner_result.prototype = {};
THBaseService_openScanner_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_openScanner_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_openScanner_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getScannerRows_args = function(args) {
  this.scannerId = null;
  this.numRows = 1;
  if (args) {
    if (args.scannerId !== undefined && args.scannerId !== null) {
      this.scannerId = args.scannerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field scannerId is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    }
  }
};
THBaseService_getScannerRows_args.prototype = {};
THBaseService_getScannerRows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scannerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getScannerRows_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getScannerRows_args');
  if (this.scannerId !== null && this.scannerId !== undefined) {
    output.writeFieldBegin('scannerId', Thrift.Type.I32, 1);
    output.writeI32(this.scannerId);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 2);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getScannerRows_result = function(args) {
  this.success = null;
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TResult]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
    if (args.ia !== undefined && args.ia !== null) {
      this.ia = args.ia;
    }
  }
};
THBaseService_getScannerRows_result.prototype = {};
THBaseService_getScannerRows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3163 = input.readListBegin();
        var _size162 = _rtmp3163.size || 0;
        for (var _i164 = 0; _i164 < _size162; ++_i164) {
          var elem165 = null;
          elem165 = new ttypes.TResult();
          elem165.read(input);
          this.success.push(elem165);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.TIllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getScannerRows_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getScannerRows_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter166 in this.success) {
      if (this.success.hasOwnProperty(iter166)) {
        iter166 = this.success[iter166];
        iter166.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_closeScanner_args = function(args) {
  this.scannerId = null;
  if (args) {
    if (args.scannerId !== undefined && args.scannerId !== null) {
      this.scannerId = args.scannerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field scannerId is unset!');
    }
  }
};
THBaseService_closeScanner_args.prototype = {};
THBaseService_closeScanner_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scannerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_closeScanner_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_closeScanner_args');
  if (this.scannerId !== null && this.scannerId !== undefined) {
    output.writeFieldBegin('scannerId', Thrift.Type.I32, 1);
    output.writeI32(this.scannerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_closeScanner_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.TIllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
    if (args.ia !== undefined && args.ia !== null) {
      this.ia = args.ia;
    }
  }
};
THBaseService_closeScanner_result.prototype = {};
THBaseService_closeScanner_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.TIllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_closeScanner_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_closeScanner_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_mutateRow_args = function(args) {
  this.table = null;
  this.trowMutations = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.trowMutations !== undefined && args.trowMutations !== null) {
      this.trowMutations = new ttypes.TRowMutations(args.trowMutations);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field trowMutations is unset!');
    }
  }
};
THBaseService_mutateRow_args.prototype = {};
THBaseService_mutateRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.trowMutations = new ttypes.TRowMutations();
        this.trowMutations.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_mutateRow_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_mutateRow_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.trowMutations !== null && this.trowMutations !== undefined) {
    output.writeFieldBegin('trowMutations', Thrift.Type.STRUCT, 2);
    this.trowMutations.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_mutateRow_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_mutateRow_result.prototype = {};
THBaseService_mutateRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_mutateRow_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_mutateRow_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getScannerResults_args = function(args) {
  this.table = null;
  this.tscan = null;
  this.numRows = 1;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.tscan !== undefined && args.tscan !== null) {
      this.tscan = new ttypes.TScan(args.tscan);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tscan is unset!');
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    }
  }
};
THBaseService_getScannerResults_args.prototype = {};
THBaseService_getScannerResults_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tscan = new ttypes.TScan();
        this.tscan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getScannerResults_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getScannerResults_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.tscan !== null && this.tscan !== undefined) {
    output.writeFieldBegin('tscan', Thrift.Type.STRUCT, 2);
    this.tscan.write(output);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getScannerResults_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TResult]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_getScannerResults_result.prototype = {};
THBaseService_getScannerResults_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3168 = input.readListBegin();
        var _size167 = _rtmp3168.size || 0;
        for (var _i169 = 0; _i169 < _size167; ++_i169) {
          var elem170 = null;
          elem170 = new ttypes.TResult();
          elem170.read(input);
          this.success.push(elem170);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getScannerResults_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getScannerResults_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter171 in this.success) {
      if (this.success.hasOwnProperty(iter171)) {
        iter171 = this.success[iter171];
        iter171.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getRegionLocation_args = function(args) {
  this.table = null;
  this.row = null;
  this.reload = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field row is unset!');
    }
    if (args.reload !== undefined && args.reload !== null) {
      this.reload = args.reload;
    }
  }
};
THBaseService_getRegionLocation_args.prototype = {};
THBaseService_getRegionLocation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.reload = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getRegionLocation_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getRegionLocation_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.reload !== null && this.reload !== undefined) {
    output.writeFieldBegin('reload', Thrift.Type.BOOL, 3);
    output.writeBool(this.reload);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getRegionLocation_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.THRegionLocation(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_getRegionLocation_result.prototype = {};
THBaseService_getRegionLocation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.THRegionLocation();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getRegionLocation_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getRegionLocation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getAllRegionLocations_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
  }
};
THBaseService_getAllRegionLocations_args.prototype = {};
THBaseService_getAllRegionLocations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getAllRegionLocations_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getAllRegionLocations_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getAllRegionLocations_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.THRegionLocation]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_getAllRegionLocations_result.prototype = {};
THBaseService_getAllRegionLocations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3173 = input.readListBegin();
        var _size172 = _rtmp3173.size || 0;
        for (var _i174 = 0; _i174 < _size172; ++_i174) {
          var elem175 = null;
          elem175 = new ttypes.THRegionLocation();
          elem175.read(input);
          this.success.push(elem175);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getAllRegionLocations_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getAllRegionLocations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter176 in this.success) {
      if (this.success.hasOwnProperty(iter176)) {
        iter176 = this.success[iter176];
        iter176.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_checkAndMutate_args = function(args) {
  this.table = null;
  this.row = null;
  this.family = null;
  this.qualifier = null;
  this.compareOp = null;
  this.value = null;
  this.rowMutations = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field row is unset!');
    }
    if (args.family !== undefined && args.family !== null) {
      this.family = args.family;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field family is unset!');
    }
    if (args.qualifier !== undefined && args.qualifier !== null) {
      this.qualifier = args.qualifier;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field qualifier is unset!');
    }
    if (args.compareOp !== undefined && args.compareOp !== null) {
      this.compareOp = args.compareOp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field compareOp is unset!');
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.rowMutations !== undefined && args.rowMutations !== null) {
      this.rowMutations = new ttypes.TRowMutations(args.rowMutations);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rowMutations is unset!');
    }
  }
};
THBaseService_checkAndMutate_args.prototype = {};
THBaseService_checkAndMutate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.family = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.qualifier = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.compareOp = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.rowMutations = new ttypes.TRowMutations();
        this.rowMutations.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_checkAndMutate_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_checkAndMutate_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeBinary(this.table);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.family !== null && this.family !== undefined) {
    output.writeFieldBegin('family', Thrift.Type.STRING, 3);
    output.writeBinary(this.family);
    output.writeFieldEnd();
  }
  if (this.qualifier !== null && this.qualifier !== undefined) {
    output.writeFieldBegin('qualifier', Thrift.Type.STRING, 4);
    output.writeBinary(this.qualifier);
    output.writeFieldEnd();
  }
  if (this.compareOp !== null && this.compareOp !== undefined) {
    output.writeFieldBegin('compareOp', Thrift.Type.I32, 5);
    output.writeI32(this.compareOp);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 6);
    output.writeBinary(this.value);
    output.writeFieldEnd();
  }
  if (this.rowMutations !== null && this.rowMutations !== undefined) {
    output.writeFieldBegin('rowMutations', Thrift.Type.STRUCT, 7);
    this.rowMutations.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_checkAndMutate_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_checkAndMutate_result.prototype = {};
THBaseService_checkAndMutate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_checkAndMutate_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_checkAndMutate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getTableDescriptor_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = new ttypes.TTableName(args.table);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field table is unset!');
    }
  }
};
THBaseService_getTableDescriptor_args.prototype = {};
THBaseService_getTableDescriptor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.table = new ttypes.TTableName();
        this.table.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getTableDescriptor_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getTableDescriptor_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRUCT, 1);
    this.table.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getTableDescriptor_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TTableDescriptor(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_getTableDescriptor_result.prototype = {};
THBaseService_getTableDescriptor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TTableDescriptor();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getTableDescriptor_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getTableDescriptor_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getTableDescriptors_args = function(args) {
  this.tables = null;
  if (args) {
    if (args.tables !== undefined && args.tables !== null) {
      this.tables = Thrift.copyList(args.tables, [ttypes.TTableName]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tables is unset!');
    }
  }
};
THBaseService_getTableDescriptors_args.prototype = {};
THBaseService_getTableDescriptors_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.tables = [];
        var _rtmp3178 = input.readListBegin();
        var _size177 = _rtmp3178.size || 0;
        for (var _i179 = 0; _i179 < _size177; ++_i179) {
          var elem180 = null;
          elem180 = new ttypes.TTableName();
          elem180.read(input);
          this.tables.push(elem180);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getTableDescriptors_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getTableDescriptors_args');
  if (this.tables !== null && this.tables !== undefined) {
    output.writeFieldBegin('tables', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.tables.length);
    for (var iter181 in this.tables) {
      if (this.tables.hasOwnProperty(iter181)) {
        iter181 = this.tables[iter181];
        iter181.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getTableDescriptors_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TTableDescriptor]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_getTableDescriptors_result.prototype = {};
THBaseService_getTableDescriptors_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3183 = input.readListBegin();
        var _size182 = _rtmp3183.size || 0;
        for (var _i184 = 0; _i184 < _size182; ++_i184) {
          var elem185 = null;
          elem185 = new ttypes.TTableDescriptor();
          elem185.read(input);
          this.success.push(elem185);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getTableDescriptors_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getTableDescriptors_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter186 in this.success) {
      if (this.success.hasOwnProperty(iter186)) {
        iter186 = this.success[iter186];
        iter186.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_tableExists_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = new ttypes.TTableName(args.tableName);
    }
  }
};
THBaseService_tableExists_args.prototype = {};
THBaseService_tableExists_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableName = new ttypes.TTableName();
        this.tableName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_tableExists_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_tableExists_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRUCT, 1);
    this.tableName.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_tableExists_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_tableExists_result.prototype = {};
THBaseService_tableExists_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_tableExists_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_tableExists_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getTableDescriptorsByPattern_args = function(args) {
  this.regex = null;
  this.includeSysTables = null;
  if (args) {
    if (args.regex !== undefined && args.regex !== null) {
      this.regex = args.regex;
    }
    if (args.includeSysTables !== undefined && args.includeSysTables !== null) {
      this.includeSysTables = args.includeSysTables;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field includeSysTables is unset!');
    }
  }
};
THBaseService_getTableDescriptorsByPattern_args.prototype = {};
THBaseService_getTableDescriptorsByPattern_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.regex = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.includeSysTables = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getTableDescriptorsByPattern_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getTableDescriptorsByPattern_args');
  if (this.regex !== null && this.regex !== undefined) {
    output.writeFieldBegin('regex', Thrift.Type.STRING, 1);
    output.writeString(this.regex);
    output.writeFieldEnd();
  }
  if (this.includeSysTables !== null && this.includeSysTables !== undefined) {
    output.writeFieldBegin('includeSysTables', Thrift.Type.BOOL, 2);
    output.writeBool(this.includeSysTables);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getTableDescriptorsByPattern_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TTableDescriptor]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_getTableDescriptorsByPattern_result.prototype = {};
THBaseService_getTableDescriptorsByPattern_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3188 = input.readListBegin();
        var _size187 = _rtmp3188.size || 0;
        for (var _i189 = 0; _i189 < _size187; ++_i189) {
          var elem190 = null;
          elem190 = new ttypes.TTableDescriptor();
          elem190.read(input);
          this.success.push(elem190);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getTableDescriptorsByPattern_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getTableDescriptorsByPattern_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter191 in this.success) {
      if (this.success.hasOwnProperty(iter191)) {
        iter191 = this.success[iter191];
        iter191.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getTableDescriptorsByNamespace_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
THBaseService_getTableDescriptorsByNamespace_args.prototype = {};
THBaseService_getTableDescriptorsByNamespace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getTableDescriptorsByNamespace_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getTableDescriptorsByNamespace_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getTableDescriptorsByNamespace_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TTableDescriptor]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_getTableDescriptorsByNamespace_result.prototype = {};
THBaseService_getTableDescriptorsByNamespace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3193 = input.readListBegin();
        var _size192 = _rtmp3193.size || 0;
        for (var _i194 = 0; _i194 < _size192; ++_i194) {
          var elem195 = null;
          elem195 = new ttypes.TTableDescriptor();
          elem195.read(input);
          this.success.push(elem195);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getTableDescriptorsByNamespace_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getTableDescriptorsByNamespace_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter196 in this.success) {
      if (this.success.hasOwnProperty(iter196)) {
        iter196 = this.success[iter196];
        iter196.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getTableNamesByPattern_args = function(args) {
  this.regex = null;
  this.includeSysTables = null;
  if (args) {
    if (args.regex !== undefined && args.regex !== null) {
      this.regex = args.regex;
    }
    if (args.includeSysTables !== undefined && args.includeSysTables !== null) {
      this.includeSysTables = args.includeSysTables;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field includeSysTables is unset!');
    }
  }
};
THBaseService_getTableNamesByPattern_args.prototype = {};
THBaseService_getTableNamesByPattern_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.regex = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.includeSysTables = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getTableNamesByPattern_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getTableNamesByPattern_args');
  if (this.regex !== null && this.regex !== undefined) {
    output.writeFieldBegin('regex', Thrift.Type.STRING, 1);
    output.writeString(this.regex);
    output.writeFieldEnd();
  }
  if (this.includeSysTables !== null && this.includeSysTables !== undefined) {
    output.writeFieldBegin('includeSysTables', Thrift.Type.BOOL, 2);
    output.writeBool(this.includeSysTables);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getTableNamesByPattern_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TTableName]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_getTableNamesByPattern_result.prototype = {};
THBaseService_getTableNamesByPattern_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3198 = input.readListBegin();
        var _size197 = _rtmp3198.size || 0;
        for (var _i199 = 0; _i199 < _size197; ++_i199) {
          var elem200 = null;
          elem200 = new ttypes.TTableName();
          elem200.read(input);
          this.success.push(elem200);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getTableNamesByPattern_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getTableNamesByPattern_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter201 in this.success) {
      if (this.success.hasOwnProperty(iter201)) {
        iter201 = this.success[iter201];
        iter201.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getTableNamesByNamespace_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
THBaseService_getTableNamesByNamespace_args.prototype = {};
THBaseService_getTableNamesByNamespace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getTableNamesByNamespace_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getTableNamesByNamespace_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getTableNamesByNamespace_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TTableName]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_getTableNamesByNamespace_result.prototype = {};
THBaseService_getTableNamesByNamespace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3203 = input.readListBegin();
        var _size202 = _rtmp3203.size || 0;
        for (var _i204 = 0; _i204 < _size202; ++_i204) {
          var elem205 = null;
          elem205 = new ttypes.TTableName();
          elem205.read(input);
          this.success.push(elem205);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getTableNamesByNamespace_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getTableNamesByNamespace_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter206 in this.success) {
      if (this.success.hasOwnProperty(iter206)) {
        iter206 = this.success[iter206];
        iter206.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_createTable_args = function(args) {
  this.desc = null;
  this.splitKeys = null;
  if (args) {
    if (args.desc !== undefined && args.desc !== null) {
      this.desc = new ttypes.TTableDescriptor(args.desc);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field desc is unset!');
    }
    if (args.splitKeys !== undefined && args.splitKeys !== null) {
      this.splitKeys = Thrift.copyList(args.splitKeys, [null]);
    }
  }
};
THBaseService_createTable_args.prototype = {};
THBaseService_createTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.desc = new ttypes.TTableDescriptor();
        this.desc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.splitKeys = [];
        var _rtmp3208 = input.readListBegin();
        var _size207 = _rtmp3208.size || 0;
        for (var _i209 = 0; _i209 < _size207; ++_i209) {
          var elem210 = null;
          elem210 = input.readBinary();
          this.splitKeys.push(elem210);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_createTable_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_createTable_args');
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRUCT, 1);
    this.desc.write(output);
    output.writeFieldEnd();
  }
  if (this.splitKeys !== null && this.splitKeys !== undefined) {
    output.writeFieldBegin('splitKeys', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.splitKeys.length);
    for (var iter211 in this.splitKeys) {
      if (this.splitKeys.hasOwnProperty(iter211)) {
        iter211 = this.splitKeys[iter211];
        output.writeBinary(iter211);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_createTable_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_createTable_result.prototype = {};
THBaseService_createTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_createTable_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_createTable_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_deleteTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = new ttypes.TTableName(args.tableName);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tableName is unset!');
    }
  }
};
THBaseService_deleteTable_args.prototype = {};
THBaseService_deleteTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableName = new ttypes.TTableName();
        this.tableName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_deleteTable_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_deleteTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRUCT, 1);
    this.tableName.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_deleteTable_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_deleteTable_result.prototype = {};
THBaseService_deleteTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_deleteTable_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_deleteTable_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_truncateTable_args = function(args) {
  this.tableName = null;
  this.preserveSplits = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = new ttypes.TTableName(args.tableName);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tableName is unset!');
    }
    if (args.preserveSplits !== undefined && args.preserveSplits !== null) {
      this.preserveSplits = args.preserveSplits;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field preserveSplits is unset!');
    }
  }
};
THBaseService_truncateTable_args.prototype = {};
THBaseService_truncateTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableName = new ttypes.TTableName();
        this.tableName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.preserveSplits = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_truncateTable_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_truncateTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRUCT, 1);
    this.tableName.write(output);
    output.writeFieldEnd();
  }
  if (this.preserveSplits !== null && this.preserveSplits !== undefined) {
    output.writeFieldBegin('preserveSplits', Thrift.Type.BOOL, 2);
    output.writeBool(this.preserveSplits);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_truncateTable_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_truncateTable_result.prototype = {};
THBaseService_truncateTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_truncateTable_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_truncateTable_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_enableTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = new ttypes.TTableName(args.tableName);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tableName is unset!');
    }
  }
};
THBaseService_enableTable_args.prototype = {};
THBaseService_enableTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableName = new ttypes.TTableName();
        this.tableName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_enableTable_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_enableTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRUCT, 1);
    this.tableName.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_enableTable_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_enableTable_result.prototype = {};
THBaseService_enableTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_enableTable_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_enableTable_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_disableTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = new ttypes.TTableName(args.tableName);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tableName is unset!');
    }
  }
};
THBaseService_disableTable_args.prototype = {};
THBaseService_disableTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableName = new ttypes.TTableName();
        this.tableName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_disableTable_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_disableTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRUCT, 1);
    this.tableName.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_disableTable_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_disableTable_result.prototype = {};
THBaseService_disableTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_disableTable_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_disableTable_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_isTableEnabled_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = new ttypes.TTableName(args.tableName);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tableName is unset!');
    }
  }
};
THBaseService_isTableEnabled_args.prototype = {};
THBaseService_isTableEnabled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableName = new ttypes.TTableName();
        this.tableName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_isTableEnabled_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_isTableEnabled_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRUCT, 1);
    this.tableName.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_isTableEnabled_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_isTableEnabled_result.prototype = {};
THBaseService_isTableEnabled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_isTableEnabled_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_isTableEnabled_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_isTableDisabled_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = new ttypes.TTableName(args.tableName);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tableName is unset!');
    }
  }
};
THBaseService_isTableDisabled_args.prototype = {};
THBaseService_isTableDisabled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableName = new ttypes.TTableName();
        this.tableName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_isTableDisabled_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_isTableDisabled_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRUCT, 1);
    this.tableName.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_isTableDisabled_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_isTableDisabled_result.prototype = {};
THBaseService_isTableDisabled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_isTableDisabled_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_isTableDisabled_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_isTableAvailable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = new ttypes.TTableName(args.tableName);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tableName is unset!');
    }
  }
};
THBaseService_isTableAvailable_args.prototype = {};
THBaseService_isTableAvailable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableName = new ttypes.TTableName();
        this.tableName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_isTableAvailable_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_isTableAvailable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRUCT, 1);
    this.tableName.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_isTableAvailable_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_isTableAvailable_result.prototype = {};
THBaseService_isTableAvailable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_isTableAvailable_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_isTableAvailable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_isTableAvailableWithSplit_args = function(args) {
  this.tableName = null;
  this.splitKeys = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = new ttypes.TTableName(args.tableName);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tableName is unset!');
    }
    if (args.splitKeys !== undefined && args.splitKeys !== null) {
      this.splitKeys = Thrift.copyList(args.splitKeys, [null]);
    }
  }
};
THBaseService_isTableAvailableWithSplit_args.prototype = {};
THBaseService_isTableAvailableWithSplit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableName = new ttypes.TTableName();
        this.tableName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.splitKeys = [];
        var _rtmp3213 = input.readListBegin();
        var _size212 = _rtmp3213.size || 0;
        for (var _i214 = 0; _i214 < _size212; ++_i214) {
          var elem215 = null;
          elem215 = input.readBinary();
          this.splitKeys.push(elem215);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_isTableAvailableWithSplit_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_isTableAvailableWithSplit_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRUCT, 1);
    this.tableName.write(output);
    output.writeFieldEnd();
  }
  if (this.splitKeys !== null && this.splitKeys !== undefined) {
    output.writeFieldBegin('splitKeys', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.splitKeys.length);
    for (var iter216 in this.splitKeys) {
      if (this.splitKeys.hasOwnProperty(iter216)) {
        iter216 = this.splitKeys[iter216];
        output.writeBinary(iter216);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_isTableAvailableWithSplit_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_isTableAvailableWithSplit_result.prototype = {};
THBaseService_isTableAvailableWithSplit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_isTableAvailableWithSplit_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_isTableAvailableWithSplit_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_addColumnFamily_args = function(args) {
  this.tableName = null;
  this.column = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = new ttypes.TTableName(args.tableName);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tableName is unset!');
    }
    if (args.column !== undefined && args.column !== null) {
      this.column = new ttypes.TColumnFamilyDescriptor(args.column);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field column is unset!');
    }
  }
};
THBaseService_addColumnFamily_args.prototype = {};
THBaseService_addColumnFamily_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableName = new ttypes.TTableName();
        this.tableName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.column = new ttypes.TColumnFamilyDescriptor();
        this.column.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_addColumnFamily_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_addColumnFamily_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRUCT, 1);
    this.tableName.write(output);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRUCT, 2);
    this.column.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_addColumnFamily_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_addColumnFamily_result.prototype = {};
THBaseService_addColumnFamily_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_addColumnFamily_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_addColumnFamily_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_deleteColumnFamily_args = function(args) {
  this.tableName = null;
  this.column = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = new ttypes.TTableName(args.tableName);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tableName is unset!');
    }
    if (args.column !== undefined && args.column !== null) {
      this.column = args.column;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field column is unset!');
    }
  }
};
THBaseService_deleteColumnFamily_args.prototype = {};
THBaseService_deleteColumnFamily_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableName = new ttypes.TTableName();
        this.tableName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_deleteColumnFamily_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_deleteColumnFamily_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRUCT, 1);
    this.tableName.write(output);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 2);
    output.writeBinary(this.column);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_deleteColumnFamily_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_deleteColumnFamily_result.prototype = {};
THBaseService_deleteColumnFamily_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_deleteColumnFamily_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_deleteColumnFamily_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_modifyColumnFamily_args = function(args) {
  this.tableName = null;
  this.column = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = new ttypes.TTableName(args.tableName);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tableName is unset!');
    }
    if (args.column !== undefined && args.column !== null) {
      this.column = new ttypes.TColumnFamilyDescriptor(args.column);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field column is unset!');
    }
  }
};
THBaseService_modifyColumnFamily_args.prototype = {};
THBaseService_modifyColumnFamily_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableName = new ttypes.TTableName();
        this.tableName.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.column = new ttypes.TColumnFamilyDescriptor();
        this.column.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_modifyColumnFamily_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_modifyColumnFamily_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRUCT, 1);
    this.tableName.write(output);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRUCT, 2);
    this.column.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_modifyColumnFamily_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_modifyColumnFamily_result.prototype = {};
THBaseService_modifyColumnFamily_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_modifyColumnFamily_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_modifyColumnFamily_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_modifyTable_args = function(args) {
  this.desc = null;
  if (args) {
    if (args.desc !== undefined && args.desc !== null) {
      this.desc = new ttypes.TTableDescriptor(args.desc);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field desc is unset!');
    }
  }
};
THBaseService_modifyTable_args.prototype = {};
THBaseService_modifyTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.desc = new ttypes.TTableDescriptor();
        this.desc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_modifyTable_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_modifyTable_args');
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRUCT, 1);
    this.desc.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_modifyTable_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_modifyTable_result.prototype = {};
THBaseService_modifyTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_modifyTable_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_modifyTable_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_createNamespace_args = function(args) {
  this.namespaceDesc = null;
  if (args) {
    if (args.namespaceDesc !== undefined && args.namespaceDesc !== null) {
      this.namespaceDesc = new ttypes.TNamespaceDescriptor(args.namespaceDesc);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field namespaceDesc is unset!');
    }
  }
};
THBaseService_createNamespace_args.prototype = {};
THBaseService_createNamespace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.namespaceDesc = new ttypes.TNamespaceDescriptor();
        this.namespaceDesc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_createNamespace_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_createNamespace_args');
  if (this.namespaceDesc !== null && this.namespaceDesc !== undefined) {
    output.writeFieldBegin('namespaceDesc', Thrift.Type.STRUCT, 1);
    this.namespaceDesc.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_createNamespace_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_createNamespace_result.prototype = {};
THBaseService_createNamespace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_createNamespace_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_createNamespace_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_modifyNamespace_args = function(args) {
  this.namespaceDesc = null;
  if (args) {
    if (args.namespaceDesc !== undefined && args.namespaceDesc !== null) {
      this.namespaceDesc = new ttypes.TNamespaceDescriptor(args.namespaceDesc);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field namespaceDesc is unset!');
    }
  }
};
THBaseService_modifyNamespace_args.prototype = {};
THBaseService_modifyNamespace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.namespaceDesc = new ttypes.TNamespaceDescriptor();
        this.namespaceDesc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_modifyNamespace_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_modifyNamespace_args');
  if (this.namespaceDesc !== null && this.namespaceDesc !== undefined) {
    output.writeFieldBegin('namespaceDesc', Thrift.Type.STRUCT, 1);
    this.namespaceDesc.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_modifyNamespace_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_modifyNamespace_result.prototype = {};
THBaseService_modifyNamespace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_modifyNamespace_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_modifyNamespace_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_deleteNamespace_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
THBaseService_deleteNamespace_args.prototype = {};
THBaseService_deleteNamespace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_deleteNamespace_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_deleteNamespace_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_deleteNamespace_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_deleteNamespace_result.prototype = {};
THBaseService_deleteNamespace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_deleteNamespace_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_deleteNamespace_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getNamespaceDescriptor_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
  }
};
THBaseService_getNamespaceDescriptor_args.prototype = {};
THBaseService_getNamespaceDescriptor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getNamespaceDescriptor_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getNamespaceDescriptor_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_getNamespaceDescriptor_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TNamespaceDescriptor(args.success);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_getNamespaceDescriptor_result.prototype = {};
THBaseService_getNamespaceDescriptor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TNamespaceDescriptor();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_getNamespaceDescriptor_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_getNamespaceDescriptor_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_listNamespaceDescriptors_args = function(args) {
};
THBaseService_listNamespaceDescriptors_args.prototype = {};
THBaseService_listNamespaceDescriptors_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_listNamespaceDescriptors_args.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_listNamespaceDescriptors_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseService_listNamespaceDescriptors_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.TIOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TNamespaceDescriptor]);
    }
    if (args.io !== undefined && args.io !== null) {
      this.io = args.io;
    }
  }
};
THBaseService_listNamespaceDescriptors_result.prototype = {};
THBaseService_listNamespaceDescriptors_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3218 = input.readListBegin();
        var _size217 = _rtmp3218.size || 0;
        for (var _i219 = 0; _i219 < _size217; ++_i219) {
          var elem220 = null;
          elem220 = new ttypes.TNamespaceDescriptor();
          elem220.read(input);
          this.success.push(elem220);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.TIOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THBaseService_listNamespaceDescriptors_result.prototype.write = function(output) {
  output.writeStructBegin('THBaseService_listNamespaceDescriptors_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter221 in this.success) {
      if (this.success.hasOwnProperty(iter221)) {
        iter221 = this.success[iter221];
        iter221.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var THBaseServiceClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
THBaseServiceClient.prototype = {};
THBaseServiceClient.prototype.seqid = function() { return this._seqid; };
THBaseServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };

THBaseServiceClient.prototype.exists = function(table, tget, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exists(table, tget);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exists(table, tget);
  }
};

THBaseServiceClient.prototype.send_exists = function(table, tget) {
  var output = new this.pClass(this.output);
  var params = {
    table: table,
    tget: tget
  };
  var args = new THBaseService_exists_args(params);
  try {
    output.writeMessageBegin('exists', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_exists = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_exists_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exists failed: unknown result');
};

THBaseServiceClient.prototype.existsAll = function(table, tgets, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_existsAll(table, tgets);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_existsAll(table, tgets);
  }
};

THBaseServiceClient.prototype.send_existsAll = function(table, tgets) {
  var output = new this.pClass(this.output);
  var params = {
    table: table,
    tgets: tgets
  };
  var args = new THBaseService_existsAll_args(params);
  try {
    output.writeMessageBegin('existsAll', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_existsAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_existsAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('existsAll failed: unknown result');
};

THBaseServiceClient.prototype.get = function(table, tget, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get(table, tget);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get(table, tget);
  }
};

THBaseServiceClient.prototype.send_get = function(table, tget) {
  var output = new this.pClass(this.output);
  var params = {
    table: table,
    tget: tget
  };
  var args = new THBaseService_get_args(params);
  try {
    output.writeMessageBegin('get', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_get = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_get_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get failed: unknown result');
};

THBaseServiceClient.prototype.getMultiple = function(table, tgets, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMultiple(table, tgets);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMultiple(table, tgets);
  }
};

THBaseServiceClient.prototype.send_getMultiple = function(table, tgets) {
  var output = new this.pClass(this.output);
  var params = {
    table: table,
    tgets: tgets
  };
  var args = new THBaseService_getMultiple_args(params);
  try {
    output.writeMessageBegin('getMultiple', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_getMultiple = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_getMultiple_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMultiple failed: unknown result');
};

THBaseServiceClient.prototype.put = function(table, tput, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_put(table, tput);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_put(table, tput);
  }
};

THBaseServiceClient.prototype.send_put = function(table, tput) {
  var output = new this.pClass(this.output);
  var params = {
    table: table,
    tput: tput
  };
  var args = new THBaseService_put_args(params);
  try {
    output.writeMessageBegin('put', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_put = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_put_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

THBaseServiceClient.prototype.checkAndPut = function(table, row, family, qualifier, value, tput, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkAndPut(table, row, family, qualifier, value, tput);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkAndPut(table, row, family, qualifier, value, tput);
  }
};

THBaseServiceClient.prototype.send_checkAndPut = function(table, row, family, qualifier, value, tput) {
  var output = new this.pClass(this.output);
  var params = {
    table: table,
    row: row,
    family: family,
    qualifier: qualifier,
    value: value,
    tput: tput
  };
  var args = new THBaseService_checkAndPut_args(params);
  try {
    output.writeMessageBegin('checkAndPut', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_checkAndPut = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_checkAndPut_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkAndPut failed: unknown result');
};

THBaseServiceClient.prototype.putMultiple = function(table, tputs, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_putMultiple(table, tputs);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_putMultiple(table, tputs);
  }
};

THBaseServiceClient.prototype.send_putMultiple = function(table, tputs) {
  var output = new this.pClass(this.output);
  var params = {
    table: table,
    tputs: tputs
  };
  var args = new THBaseService_putMultiple_args(params);
  try {
    output.writeMessageBegin('putMultiple', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_putMultiple = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_putMultiple_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

THBaseServiceClient.prototype.deleteSingle = function(table, tdelete, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteSingle(table, tdelete);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteSingle(table, tdelete);
  }
};

THBaseServiceClient.prototype.send_deleteSingle = function(table, tdelete) {
  var output = new this.pClass(this.output);
  var params = {
    table: table,
    tdelete: tdelete
  };
  var args = new THBaseService_deleteSingle_args(params);
  try {
    output.writeMessageBegin('deleteSingle', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_deleteSingle = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_deleteSingle_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

THBaseServiceClient.prototype.deleteMultiple = function(table, tdeletes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteMultiple(table, tdeletes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteMultiple(table, tdeletes);
  }
};

THBaseServiceClient.prototype.send_deleteMultiple = function(table, tdeletes) {
  var output = new this.pClass(this.output);
  var params = {
    table: table,
    tdeletes: tdeletes
  };
  var args = new THBaseService_deleteMultiple_args(params);
  try {
    output.writeMessageBegin('deleteMultiple', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_deleteMultiple = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_deleteMultiple_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteMultiple failed: unknown result');
};

THBaseServiceClient.prototype.checkAndDelete = function(table, row, family, qualifier, value, tdelete, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkAndDelete(table, row, family, qualifier, value, tdelete);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkAndDelete(table, row, family, qualifier, value, tdelete);
  }
};

THBaseServiceClient.prototype.send_checkAndDelete = function(table, row, family, qualifier, value, tdelete) {
  var output = new this.pClass(this.output);
  var params = {
    table: table,
    row: row,
    family: family,
    qualifier: qualifier,
    value: value,
    tdelete: tdelete
  };
  var args = new THBaseService_checkAndDelete_args(params);
  try {
    output.writeMessageBegin('checkAndDelete', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_checkAndDelete = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_checkAndDelete_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkAndDelete failed: unknown result');
};

THBaseServiceClient.prototype.increment = function(table, tincrement, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_increment(table, tincrement);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_increment(table, tincrement);
  }
};

THBaseServiceClient.prototype.send_increment = function(table, tincrement) {
  var output = new this.pClass(this.output);
  var params = {
    table: table,
    tincrement: tincrement
  };
  var args = new THBaseService_increment_args(params);
  try {
    output.writeMessageBegin('increment', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_increment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_increment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('increment failed: unknown result');
};

THBaseServiceClient.prototype.append = function(table, tappend, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_append(table, tappend);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_append(table, tappend);
  }
};

THBaseServiceClient.prototype.send_append = function(table, tappend) {
  var output = new this.pClass(this.output);
  var params = {
    table: table,
    tappend: tappend
  };
  var args = new THBaseService_append_args(params);
  try {
    output.writeMessageBegin('append', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_append = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_append_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('append failed: unknown result');
};

THBaseServiceClient.prototype.openScanner = function(table, tscan, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_openScanner(table, tscan);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_openScanner(table, tscan);
  }
};

THBaseServiceClient.prototype.send_openScanner = function(table, tscan) {
  var output = new this.pClass(this.output);
  var params = {
    table: table,
    tscan: tscan
  };
  var args = new THBaseService_openScanner_args(params);
  try {
    output.writeMessageBegin('openScanner', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_openScanner = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_openScanner_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('openScanner failed: unknown result');
};

THBaseServiceClient.prototype.getScannerRows = function(scannerId, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getScannerRows(scannerId, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getScannerRows(scannerId, numRows);
  }
};

THBaseServiceClient.prototype.send_getScannerRows = function(scannerId, numRows) {
  var output = new this.pClass(this.output);
  var params = {
    scannerId: scannerId,
    numRows: numRows
  };
  var args = new THBaseService_getScannerRows_args(params);
  try {
    output.writeMessageBegin('getScannerRows', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_getScannerRows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_getScannerRows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getScannerRows failed: unknown result');
};

THBaseServiceClient.prototype.closeScanner = function(scannerId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_closeScanner(scannerId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_closeScanner(scannerId);
  }
};

THBaseServiceClient.prototype.send_closeScanner = function(scannerId) {
  var output = new this.pClass(this.output);
  var params = {
    scannerId: scannerId
  };
  var args = new THBaseService_closeScanner_args(params);
  try {
    output.writeMessageBegin('closeScanner', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_closeScanner = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_closeScanner_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null);
};

THBaseServiceClient.prototype.mutateRow = function(table, trowMutations, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutateRow(table, trowMutations);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutateRow(table, trowMutations);
  }
};

THBaseServiceClient.prototype.send_mutateRow = function(table, trowMutations) {
  var output = new this.pClass(this.output);
  var params = {
    table: table,
    trowMutations: trowMutations
  };
  var args = new THBaseService_mutateRow_args(params);
  try {
    output.writeMessageBegin('mutateRow', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_mutateRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_mutateRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

THBaseServiceClient.prototype.getScannerResults = function(table, tscan, numRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getScannerResults(table, tscan, numRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getScannerResults(table, tscan, numRows);
  }
};

THBaseServiceClient.prototype.send_getScannerResults = function(table, tscan, numRows) {
  var output = new this.pClass(this.output);
  var params = {
    table: table,
    tscan: tscan,
    numRows: numRows
  };
  var args = new THBaseService_getScannerResults_args(params);
  try {
    output.writeMessageBegin('getScannerResults', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_getScannerResults = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_getScannerResults_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getScannerResults failed: unknown result');
};

THBaseServiceClient.prototype.getRegionLocation = function(table, row, reload, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRegionLocation(table, row, reload);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRegionLocation(table, row, reload);
  }
};

THBaseServiceClient.prototype.send_getRegionLocation = function(table, row, reload) {
  var output = new this.pClass(this.output);
  var params = {
    table: table,
    row: row,
    reload: reload
  };
  var args = new THBaseService_getRegionLocation_args(params);
  try {
    output.writeMessageBegin('getRegionLocation', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_getRegionLocation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_getRegionLocation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRegionLocation failed: unknown result');
};

THBaseServiceClient.prototype.getAllRegionLocations = function(table, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllRegionLocations(table);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllRegionLocations(table);
  }
};

THBaseServiceClient.prototype.send_getAllRegionLocations = function(table) {
  var output = new this.pClass(this.output);
  var params = {
    table: table
  };
  var args = new THBaseService_getAllRegionLocations_args(params);
  try {
    output.writeMessageBegin('getAllRegionLocations', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_getAllRegionLocations = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_getAllRegionLocations_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllRegionLocations failed: unknown result');
};

THBaseServiceClient.prototype.checkAndMutate = function(table, row, family, qualifier, compareOp, value, rowMutations, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkAndMutate(table, row, family, qualifier, compareOp, value, rowMutations);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkAndMutate(table, row, family, qualifier, compareOp, value, rowMutations);
  }
};

THBaseServiceClient.prototype.send_checkAndMutate = function(table, row, family, qualifier, compareOp, value, rowMutations) {
  var output = new this.pClass(this.output);
  var params = {
    table: table,
    row: row,
    family: family,
    qualifier: qualifier,
    compareOp: compareOp,
    value: value,
    rowMutations: rowMutations
  };
  var args = new THBaseService_checkAndMutate_args(params);
  try {
    output.writeMessageBegin('checkAndMutate', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_checkAndMutate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_checkAndMutate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkAndMutate failed: unknown result');
};

THBaseServiceClient.prototype.getTableDescriptor = function(table, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTableDescriptor(table);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTableDescriptor(table);
  }
};

THBaseServiceClient.prototype.send_getTableDescriptor = function(table) {
  var output = new this.pClass(this.output);
  var params = {
    table: table
  };
  var args = new THBaseService_getTableDescriptor_args(params);
  try {
    output.writeMessageBegin('getTableDescriptor', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_getTableDescriptor = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_getTableDescriptor_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableDescriptor failed: unknown result');
};

THBaseServiceClient.prototype.getTableDescriptors = function(tables, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTableDescriptors(tables);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTableDescriptors(tables);
  }
};

THBaseServiceClient.prototype.send_getTableDescriptors = function(tables) {
  var output = new this.pClass(this.output);
  var params = {
    tables: tables
  };
  var args = new THBaseService_getTableDescriptors_args(params);
  try {
    output.writeMessageBegin('getTableDescriptors', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_getTableDescriptors = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_getTableDescriptors_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableDescriptors failed: unknown result');
};

THBaseServiceClient.prototype.tableExists = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_tableExists(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_tableExists(tableName);
  }
};

THBaseServiceClient.prototype.send_tableExists = function(tableName) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName
  };
  var args = new THBaseService_tableExists_args(params);
  try {
    output.writeMessageBegin('tableExists', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_tableExists = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_tableExists_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('tableExists failed: unknown result');
};

THBaseServiceClient.prototype.getTableDescriptorsByPattern = function(regex, includeSysTables, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTableDescriptorsByPattern(regex, includeSysTables);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTableDescriptorsByPattern(regex, includeSysTables);
  }
};

THBaseServiceClient.prototype.send_getTableDescriptorsByPattern = function(regex, includeSysTables) {
  var output = new this.pClass(this.output);
  var params = {
    regex: regex,
    includeSysTables: includeSysTables
  };
  var args = new THBaseService_getTableDescriptorsByPattern_args(params);
  try {
    output.writeMessageBegin('getTableDescriptorsByPattern', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_getTableDescriptorsByPattern = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_getTableDescriptorsByPattern_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableDescriptorsByPattern failed: unknown result');
};

THBaseServiceClient.prototype.getTableDescriptorsByNamespace = function(name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTableDescriptorsByNamespace(name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTableDescriptorsByNamespace(name);
  }
};

THBaseServiceClient.prototype.send_getTableDescriptorsByNamespace = function(name) {
  var output = new this.pClass(this.output);
  var params = {
    name: name
  };
  var args = new THBaseService_getTableDescriptorsByNamespace_args(params);
  try {
    output.writeMessageBegin('getTableDescriptorsByNamespace', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_getTableDescriptorsByNamespace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_getTableDescriptorsByNamespace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableDescriptorsByNamespace failed: unknown result');
};

THBaseServiceClient.prototype.getTableNamesByPattern = function(regex, includeSysTables, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTableNamesByPattern(regex, includeSysTables);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTableNamesByPattern(regex, includeSysTables);
  }
};

THBaseServiceClient.prototype.send_getTableNamesByPattern = function(regex, includeSysTables) {
  var output = new this.pClass(this.output);
  var params = {
    regex: regex,
    includeSysTables: includeSysTables
  };
  var args = new THBaseService_getTableNamesByPattern_args(params);
  try {
    output.writeMessageBegin('getTableNamesByPattern', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_getTableNamesByPattern = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_getTableNamesByPattern_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableNamesByPattern failed: unknown result');
};

THBaseServiceClient.prototype.getTableNamesByNamespace = function(name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTableNamesByNamespace(name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTableNamesByNamespace(name);
  }
};

THBaseServiceClient.prototype.send_getTableNamesByNamespace = function(name) {
  var output = new this.pClass(this.output);
  var params = {
    name: name
  };
  var args = new THBaseService_getTableNamesByNamespace_args(params);
  try {
    output.writeMessageBegin('getTableNamesByNamespace', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_getTableNamesByNamespace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_getTableNamesByNamespace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableNamesByNamespace failed: unknown result');
};

THBaseServiceClient.prototype.createTable = function(desc, splitKeys, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createTable(desc, splitKeys);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createTable(desc, splitKeys);
  }
};

THBaseServiceClient.prototype.send_createTable = function(desc, splitKeys) {
  var output = new this.pClass(this.output);
  var params = {
    desc: desc,
    splitKeys: splitKeys
  };
  var args = new THBaseService_createTable_args(params);
  try {
    output.writeMessageBegin('createTable', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_createTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_createTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

THBaseServiceClient.prototype.deleteTable = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteTable(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteTable(tableName);
  }
};

THBaseServiceClient.prototype.send_deleteTable = function(tableName) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName
  };
  var args = new THBaseService_deleteTable_args(params);
  try {
    output.writeMessageBegin('deleteTable', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_deleteTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_deleteTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

THBaseServiceClient.prototype.truncateTable = function(tableName, preserveSplits, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_truncateTable(tableName, preserveSplits);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_truncateTable(tableName, preserveSplits);
  }
};

THBaseServiceClient.prototype.send_truncateTable = function(tableName, preserveSplits) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    preserveSplits: preserveSplits
  };
  var args = new THBaseService_truncateTable_args(params);
  try {
    output.writeMessageBegin('truncateTable', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_truncateTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_truncateTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

THBaseServiceClient.prototype.enableTable = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_enableTable(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_enableTable(tableName);
  }
};

THBaseServiceClient.prototype.send_enableTable = function(tableName) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName
  };
  var args = new THBaseService_enableTable_args(params);
  try {
    output.writeMessageBegin('enableTable', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_enableTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_enableTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

THBaseServiceClient.prototype.disableTable = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_disableTable(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_disableTable(tableName);
  }
};

THBaseServiceClient.prototype.send_disableTable = function(tableName) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName
  };
  var args = new THBaseService_disableTable_args(params);
  try {
    output.writeMessageBegin('disableTable', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_disableTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_disableTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

THBaseServiceClient.prototype.isTableEnabled = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isTableEnabled(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isTableEnabled(tableName);
  }
};

THBaseServiceClient.prototype.send_isTableEnabled = function(tableName) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName
  };
  var args = new THBaseService_isTableEnabled_args(params);
  try {
    output.writeMessageBegin('isTableEnabled', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_isTableEnabled = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_isTableEnabled_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isTableEnabled failed: unknown result');
};

THBaseServiceClient.prototype.isTableDisabled = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isTableDisabled(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isTableDisabled(tableName);
  }
};

THBaseServiceClient.prototype.send_isTableDisabled = function(tableName) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName
  };
  var args = new THBaseService_isTableDisabled_args(params);
  try {
    output.writeMessageBegin('isTableDisabled', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_isTableDisabled = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_isTableDisabled_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isTableDisabled failed: unknown result');
};

THBaseServiceClient.prototype.isTableAvailable = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isTableAvailable(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isTableAvailable(tableName);
  }
};

THBaseServiceClient.prototype.send_isTableAvailable = function(tableName) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName
  };
  var args = new THBaseService_isTableAvailable_args(params);
  try {
    output.writeMessageBegin('isTableAvailable', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_isTableAvailable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_isTableAvailable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isTableAvailable failed: unknown result');
};

THBaseServiceClient.prototype.isTableAvailableWithSplit = function(tableName, splitKeys, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isTableAvailableWithSplit(tableName, splitKeys);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isTableAvailableWithSplit(tableName, splitKeys);
  }
};

THBaseServiceClient.prototype.send_isTableAvailableWithSplit = function(tableName, splitKeys) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    splitKeys: splitKeys
  };
  var args = new THBaseService_isTableAvailableWithSplit_args(params);
  try {
    output.writeMessageBegin('isTableAvailableWithSplit', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_isTableAvailableWithSplit = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_isTableAvailableWithSplit_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isTableAvailableWithSplit failed: unknown result');
};

THBaseServiceClient.prototype.addColumnFamily = function(tableName, column, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addColumnFamily(tableName, column);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addColumnFamily(tableName, column);
  }
};

THBaseServiceClient.prototype.send_addColumnFamily = function(tableName, column) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    column: column
  };
  var args = new THBaseService_addColumnFamily_args(params);
  try {
    output.writeMessageBegin('addColumnFamily', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_addColumnFamily = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_addColumnFamily_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

THBaseServiceClient.prototype.deleteColumnFamily = function(tableName, column, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteColumnFamily(tableName, column);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteColumnFamily(tableName, column);
  }
};

THBaseServiceClient.prototype.send_deleteColumnFamily = function(tableName, column) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    column: column
  };
  var args = new THBaseService_deleteColumnFamily_args(params);
  try {
    output.writeMessageBegin('deleteColumnFamily', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_deleteColumnFamily = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_deleteColumnFamily_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

THBaseServiceClient.prototype.modifyColumnFamily = function(tableName, column, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_modifyColumnFamily(tableName, column);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_modifyColumnFamily(tableName, column);
  }
};

THBaseServiceClient.prototype.send_modifyColumnFamily = function(tableName, column) {
  var output = new this.pClass(this.output);
  var params = {
    tableName: tableName,
    column: column
  };
  var args = new THBaseService_modifyColumnFamily_args(params);
  try {
    output.writeMessageBegin('modifyColumnFamily', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_modifyColumnFamily = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_modifyColumnFamily_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

THBaseServiceClient.prototype.modifyTable = function(desc, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_modifyTable(desc);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_modifyTable(desc);
  }
};

THBaseServiceClient.prototype.send_modifyTable = function(desc) {
  var output = new this.pClass(this.output);
  var params = {
    desc: desc
  };
  var args = new THBaseService_modifyTable_args(params);
  try {
    output.writeMessageBegin('modifyTable', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_modifyTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_modifyTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

THBaseServiceClient.prototype.createNamespace = function(namespaceDesc, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createNamespace(namespaceDesc);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createNamespace(namespaceDesc);
  }
};

THBaseServiceClient.prototype.send_createNamespace = function(namespaceDesc) {
  var output = new this.pClass(this.output);
  var params = {
    namespaceDesc: namespaceDesc
  };
  var args = new THBaseService_createNamespace_args(params);
  try {
    output.writeMessageBegin('createNamespace', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_createNamespace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_createNamespace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

THBaseServiceClient.prototype.modifyNamespace = function(namespaceDesc, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_modifyNamespace(namespaceDesc);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_modifyNamespace(namespaceDesc);
  }
};

THBaseServiceClient.prototype.send_modifyNamespace = function(namespaceDesc) {
  var output = new this.pClass(this.output);
  var params = {
    namespaceDesc: namespaceDesc
  };
  var args = new THBaseService_modifyNamespace_args(params);
  try {
    output.writeMessageBegin('modifyNamespace', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_modifyNamespace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_modifyNamespace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

THBaseServiceClient.prototype.deleteNamespace = function(name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteNamespace(name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteNamespace(name);
  }
};

THBaseServiceClient.prototype.send_deleteNamespace = function(name) {
  var output = new this.pClass(this.output);
  var params = {
    name: name
  };
  var args = new THBaseService_deleteNamespace_args(params);
  try {
    output.writeMessageBegin('deleteNamespace', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_deleteNamespace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_deleteNamespace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null);
};

THBaseServiceClient.prototype.getNamespaceDescriptor = function(name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNamespaceDescriptor(name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNamespaceDescriptor(name);
  }
};

THBaseServiceClient.prototype.send_getNamespaceDescriptor = function(name) {
  var output = new this.pClass(this.output);
  var params = {
    name: name
  };
  var args = new THBaseService_getNamespaceDescriptor_args(params);
  try {
    output.writeMessageBegin('getNamespaceDescriptor', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_getNamespaceDescriptor = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_getNamespaceDescriptor_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNamespaceDescriptor failed: unknown result');
};

THBaseServiceClient.prototype.listNamespaceDescriptors = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listNamespaceDescriptors();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listNamespaceDescriptors();
  }
};

THBaseServiceClient.prototype.send_listNamespaceDescriptors = function() {
  var output = new this.pClass(this.output);
  var args = new THBaseService_listNamespaceDescriptors_args();
  try {
    output.writeMessageBegin('listNamespaceDescriptors', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

THBaseServiceClient.prototype.recv_listNamespaceDescriptors = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new THBaseService_listNamespaceDescriptors_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listNamespaceDescriptors failed: unknown result');
};
var THBaseServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
THBaseServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
THBaseServiceProcessor.prototype.process_exists = function(seqid, input, output) {
  var args = new THBaseService_exists_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exists.length === 2) {
    Q.fcall(this._handler.exists.bind(this._handler),
      args.table,
      args.tget
    ).then(function(result) {
      var result_obj = new THBaseService_exists_result({success: result});
      output.writeMessageBegin("exists", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_exists_result(err);
        output.writeMessageBegin("exists", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exists", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.exists(args.table, args.tget, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_exists_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("exists", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exists", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_existsAll = function(seqid, input, output) {
  var args = new THBaseService_existsAll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.existsAll.length === 2) {
    Q.fcall(this._handler.existsAll.bind(this._handler),
      args.table,
      args.tgets
    ).then(function(result) {
      var result_obj = new THBaseService_existsAll_result({success: result});
      output.writeMessageBegin("existsAll", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_existsAll_result(err);
        output.writeMessageBegin("existsAll", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("existsAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.existsAll(args.table, args.tgets, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_existsAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("existsAll", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("existsAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_get = function(seqid, input, output) {
  var args = new THBaseService_get_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get.length === 2) {
    Q.fcall(this._handler.get.bind(this._handler),
      args.table,
      args.tget
    ).then(function(result) {
      var result_obj = new THBaseService_get_result({success: result});
      output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_get_result(err);
        output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get(args.table, args.tget, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_get_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_getMultiple = function(seqid, input, output) {
  var args = new THBaseService_getMultiple_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMultiple.length === 2) {
    Q.fcall(this._handler.getMultiple.bind(this._handler),
      args.table,
      args.tgets
    ).then(function(result) {
      var result_obj = new THBaseService_getMultiple_result({success: result});
      output.writeMessageBegin("getMultiple", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_getMultiple_result(err);
        output.writeMessageBegin("getMultiple", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMultiple", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getMultiple(args.table, args.tgets, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_getMultiple_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getMultiple", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMultiple", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_put = function(seqid, input, output) {
  var args = new THBaseService_put_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.put.length === 2) {
    Q.fcall(this._handler.put.bind(this._handler),
      args.table,
      args.tput
    ).then(function(result) {
      var result_obj = new THBaseService_put_result({success: result});
      output.writeMessageBegin("put", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_put_result(err);
        output.writeMessageBegin("put", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("put", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.put(args.table, args.tput, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_put_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("put", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("put", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_checkAndPut = function(seqid, input, output) {
  var args = new THBaseService_checkAndPut_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkAndPut.length === 6) {
    Q.fcall(this._handler.checkAndPut.bind(this._handler),
      args.table,
      args.row,
      args.family,
      args.qualifier,
      args.value,
      args.tput
    ).then(function(result) {
      var result_obj = new THBaseService_checkAndPut_result({success: result});
      output.writeMessageBegin("checkAndPut", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_checkAndPut_result(err);
        output.writeMessageBegin("checkAndPut", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkAndPut", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.checkAndPut(args.table, args.row, args.family, args.qualifier, args.value, args.tput, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_checkAndPut_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("checkAndPut", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkAndPut", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_putMultiple = function(seqid, input, output) {
  var args = new THBaseService_putMultiple_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.putMultiple.length === 2) {
    Q.fcall(this._handler.putMultiple.bind(this._handler),
      args.table,
      args.tputs
    ).then(function(result) {
      var result_obj = new THBaseService_putMultiple_result({success: result});
      output.writeMessageBegin("putMultiple", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_putMultiple_result(err);
        output.writeMessageBegin("putMultiple", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putMultiple", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.putMultiple(args.table, args.tputs, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_putMultiple_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("putMultiple", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putMultiple", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_deleteSingle = function(seqid, input, output) {
  var args = new THBaseService_deleteSingle_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteSingle.length === 2) {
    Q.fcall(this._handler.deleteSingle.bind(this._handler),
      args.table,
      args.tdelete
    ).then(function(result) {
      var result_obj = new THBaseService_deleteSingle_result({success: result});
      output.writeMessageBegin("deleteSingle", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_deleteSingle_result(err);
        output.writeMessageBegin("deleteSingle", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteSingle", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.deleteSingle(args.table, args.tdelete, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_deleteSingle_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteSingle", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteSingle", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_deleteMultiple = function(seqid, input, output) {
  var args = new THBaseService_deleteMultiple_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteMultiple.length === 2) {
    Q.fcall(this._handler.deleteMultiple.bind(this._handler),
      args.table,
      args.tdeletes
    ).then(function(result) {
      var result_obj = new THBaseService_deleteMultiple_result({success: result});
      output.writeMessageBegin("deleteMultiple", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_deleteMultiple_result(err);
        output.writeMessageBegin("deleteMultiple", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteMultiple", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.deleteMultiple(args.table, args.tdeletes, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_deleteMultiple_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteMultiple", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteMultiple", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_checkAndDelete = function(seqid, input, output) {
  var args = new THBaseService_checkAndDelete_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkAndDelete.length === 6) {
    Q.fcall(this._handler.checkAndDelete.bind(this._handler),
      args.table,
      args.row,
      args.family,
      args.qualifier,
      args.value,
      args.tdelete
    ).then(function(result) {
      var result_obj = new THBaseService_checkAndDelete_result({success: result});
      output.writeMessageBegin("checkAndDelete", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_checkAndDelete_result(err);
        output.writeMessageBegin("checkAndDelete", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkAndDelete", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.checkAndDelete(args.table, args.row, args.family, args.qualifier, args.value, args.tdelete, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_checkAndDelete_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("checkAndDelete", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkAndDelete", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_increment = function(seqid, input, output) {
  var args = new THBaseService_increment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.increment.length === 2) {
    Q.fcall(this._handler.increment.bind(this._handler),
      args.table,
      args.tincrement
    ).then(function(result) {
      var result_obj = new THBaseService_increment_result({success: result});
      output.writeMessageBegin("increment", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_increment_result(err);
        output.writeMessageBegin("increment", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("increment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.increment(args.table, args.tincrement, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_increment_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("increment", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("increment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_append = function(seqid, input, output) {
  var args = new THBaseService_append_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.append.length === 2) {
    Q.fcall(this._handler.append.bind(this._handler),
      args.table,
      args.tappend
    ).then(function(result) {
      var result_obj = new THBaseService_append_result({success: result});
      output.writeMessageBegin("append", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_append_result(err);
        output.writeMessageBegin("append", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("append", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.append(args.table, args.tappend, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_append_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("append", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("append", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_openScanner = function(seqid, input, output) {
  var args = new THBaseService_openScanner_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.openScanner.length === 2) {
    Q.fcall(this._handler.openScanner.bind(this._handler),
      args.table,
      args.tscan
    ).then(function(result) {
      var result_obj = new THBaseService_openScanner_result({success: result});
      output.writeMessageBegin("openScanner", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_openScanner_result(err);
        output.writeMessageBegin("openScanner", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("openScanner", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.openScanner(args.table, args.tscan, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_openScanner_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("openScanner", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("openScanner", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_getScannerRows = function(seqid, input, output) {
  var args = new THBaseService_getScannerRows_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getScannerRows.length === 2) {
    Q.fcall(this._handler.getScannerRows.bind(this._handler),
      args.scannerId,
      args.numRows
    ).then(function(result) {
      var result_obj = new THBaseService_getScannerRows_result({success: result});
      output.writeMessageBegin("getScannerRows", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError || err instanceof ttypes.TIllegalArgument) {
        result = new THBaseService_getScannerRows_result(err);
        output.writeMessageBegin("getScannerRows", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getScannerRows", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getScannerRows(args.scannerId, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError || err instanceof ttypes.TIllegalArgument) {
        result_obj = new THBaseService_getScannerRows_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getScannerRows", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getScannerRows", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_closeScanner = function(seqid, input, output) {
  var args = new THBaseService_closeScanner_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.closeScanner.length === 1) {
    Q.fcall(this._handler.closeScanner.bind(this._handler),
      args.scannerId
    ).then(function(result) {
      var result_obj = new THBaseService_closeScanner_result({success: result});
      output.writeMessageBegin("closeScanner", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError || err instanceof ttypes.TIllegalArgument) {
        result = new THBaseService_closeScanner_result(err);
        output.writeMessageBegin("closeScanner", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("closeScanner", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.closeScanner(args.scannerId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError || err instanceof ttypes.TIllegalArgument) {
        result_obj = new THBaseService_closeScanner_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("closeScanner", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("closeScanner", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_mutateRow = function(seqid, input, output) {
  var args = new THBaseService_mutateRow_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutateRow.length === 2) {
    Q.fcall(this._handler.mutateRow.bind(this._handler),
      args.table,
      args.trowMutations
    ).then(function(result) {
      var result_obj = new THBaseService_mutateRow_result({success: result});
      output.writeMessageBegin("mutateRow", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_mutateRow_result(err);
        output.writeMessageBegin("mutateRow", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutateRow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.mutateRow(args.table, args.trowMutations, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_mutateRow_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("mutateRow", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutateRow", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_getScannerResults = function(seqid, input, output) {
  var args = new THBaseService_getScannerResults_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getScannerResults.length === 3) {
    Q.fcall(this._handler.getScannerResults.bind(this._handler),
      args.table,
      args.tscan,
      args.numRows
    ).then(function(result) {
      var result_obj = new THBaseService_getScannerResults_result({success: result});
      output.writeMessageBegin("getScannerResults", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_getScannerResults_result(err);
        output.writeMessageBegin("getScannerResults", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getScannerResults", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getScannerResults(args.table, args.tscan, args.numRows, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_getScannerResults_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getScannerResults", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getScannerResults", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_getRegionLocation = function(seqid, input, output) {
  var args = new THBaseService_getRegionLocation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRegionLocation.length === 3) {
    Q.fcall(this._handler.getRegionLocation.bind(this._handler),
      args.table,
      args.row,
      args.reload
    ).then(function(result) {
      var result_obj = new THBaseService_getRegionLocation_result({success: result});
      output.writeMessageBegin("getRegionLocation", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_getRegionLocation_result(err);
        output.writeMessageBegin("getRegionLocation", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRegionLocation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getRegionLocation(args.table, args.row, args.reload, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_getRegionLocation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRegionLocation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRegionLocation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_getAllRegionLocations = function(seqid, input, output) {
  var args = new THBaseService_getAllRegionLocations_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllRegionLocations.length === 1) {
    Q.fcall(this._handler.getAllRegionLocations.bind(this._handler),
      args.table
    ).then(function(result) {
      var result_obj = new THBaseService_getAllRegionLocations_result({success: result});
      output.writeMessageBegin("getAllRegionLocations", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_getAllRegionLocations_result(err);
        output.writeMessageBegin("getAllRegionLocations", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllRegionLocations", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAllRegionLocations(args.table, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_getAllRegionLocations_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAllRegionLocations", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllRegionLocations", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_checkAndMutate = function(seqid, input, output) {
  var args = new THBaseService_checkAndMutate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkAndMutate.length === 7) {
    Q.fcall(this._handler.checkAndMutate.bind(this._handler),
      args.table,
      args.row,
      args.family,
      args.qualifier,
      args.compareOp,
      args.value,
      args.rowMutations
    ).then(function(result) {
      var result_obj = new THBaseService_checkAndMutate_result({success: result});
      output.writeMessageBegin("checkAndMutate", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_checkAndMutate_result(err);
        output.writeMessageBegin("checkAndMutate", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkAndMutate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.checkAndMutate(args.table, args.row, args.family, args.qualifier, args.compareOp, args.value, args.rowMutations, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_checkAndMutate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("checkAndMutate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkAndMutate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_getTableDescriptor = function(seqid, input, output) {
  var args = new THBaseService_getTableDescriptor_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTableDescriptor.length === 1) {
    Q.fcall(this._handler.getTableDescriptor.bind(this._handler),
      args.table
    ).then(function(result) {
      var result_obj = new THBaseService_getTableDescriptor_result({success: result});
      output.writeMessageBegin("getTableDescriptor", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_getTableDescriptor_result(err);
        output.writeMessageBegin("getTableDescriptor", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTableDescriptor", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getTableDescriptor(args.table, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_getTableDescriptor_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getTableDescriptor", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTableDescriptor", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_getTableDescriptors = function(seqid, input, output) {
  var args = new THBaseService_getTableDescriptors_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTableDescriptors.length === 1) {
    Q.fcall(this._handler.getTableDescriptors.bind(this._handler),
      args.tables
    ).then(function(result) {
      var result_obj = new THBaseService_getTableDescriptors_result({success: result});
      output.writeMessageBegin("getTableDescriptors", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_getTableDescriptors_result(err);
        output.writeMessageBegin("getTableDescriptors", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTableDescriptors", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getTableDescriptors(args.tables, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_getTableDescriptors_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getTableDescriptors", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTableDescriptors", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_tableExists = function(seqid, input, output) {
  var args = new THBaseService_tableExists_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.tableExists.length === 1) {
    Q.fcall(this._handler.tableExists.bind(this._handler),
      args.tableName
    ).then(function(result) {
      var result_obj = new THBaseService_tableExists_result({success: result});
      output.writeMessageBegin("tableExists", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_tableExists_result(err);
        output.writeMessageBegin("tableExists", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("tableExists", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.tableExists(args.tableName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_tableExists_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("tableExists", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("tableExists", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_getTableDescriptorsByPattern = function(seqid, input, output) {
  var args = new THBaseService_getTableDescriptorsByPattern_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTableDescriptorsByPattern.length === 2) {
    Q.fcall(this._handler.getTableDescriptorsByPattern.bind(this._handler),
      args.regex,
      args.includeSysTables
    ).then(function(result) {
      var result_obj = new THBaseService_getTableDescriptorsByPattern_result({success: result});
      output.writeMessageBegin("getTableDescriptorsByPattern", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_getTableDescriptorsByPattern_result(err);
        output.writeMessageBegin("getTableDescriptorsByPattern", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTableDescriptorsByPattern", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getTableDescriptorsByPattern(args.regex, args.includeSysTables, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_getTableDescriptorsByPattern_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getTableDescriptorsByPattern", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTableDescriptorsByPattern", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_getTableDescriptorsByNamespace = function(seqid, input, output) {
  var args = new THBaseService_getTableDescriptorsByNamespace_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTableDescriptorsByNamespace.length === 1) {
    Q.fcall(this._handler.getTableDescriptorsByNamespace.bind(this._handler),
      args.name
    ).then(function(result) {
      var result_obj = new THBaseService_getTableDescriptorsByNamespace_result({success: result});
      output.writeMessageBegin("getTableDescriptorsByNamespace", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_getTableDescriptorsByNamespace_result(err);
        output.writeMessageBegin("getTableDescriptorsByNamespace", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTableDescriptorsByNamespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getTableDescriptorsByNamespace(args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_getTableDescriptorsByNamespace_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getTableDescriptorsByNamespace", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTableDescriptorsByNamespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_getTableNamesByPattern = function(seqid, input, output) {
  var args = new THBaseService_getTableNamesByPattern_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTableNamesByPattern.length === 2) {
    Q.fcall(this._handler.getTableNamesByPattern.bind(this._handler),
      args.regex,
      args.includeSysTables
    ).then(function(result) {
      var result_obj = new THBaseService_getTableNamesByPattern_result({success: result});
      output.writeMessageBegin("getTableNamesByPattern", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_getTableNamesByPattern_result(err);
        output.writeMessageBegin("getTableNamesByPattern", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTableNamesByPattern", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getTableNamesByPattern(args.regex, args.includeSysTables, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_getTableNamesByPattern_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getTableNamesByPattern", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTableNamesByPattern", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_getTableNamesByNamespace = function(seqid, input, output) {
  var args = new THBaseService_getTableNamesByNamespace_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTableNamesByNamespace.length === 1) {
    Q.fcall(this._handler.getTableNamesByNamespace.bind(this._handler),
      args.name
    ).then(function(result) {
      var result_obj = new THBaseService_getTableNamesByNamespace_result({success: result});
      output.writeMessageBegin("getTableNamesByNamespace", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_getTableNamesByNamespace_result(err);
        output.writeMessageBegin("getTableNamesByNamespace", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTableNamesByNamespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getTableNamesByNamespace(args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_getTableNamesByNamespace_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getTableNamesByNamespace", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTableNamesByNamespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_createTable = function(seqid, input, output) {
  var args = new THBaseService_createTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createTable.length === 2) {
    Q.fcall(this._handler.createTable.bind(this._handler),
      args.desc,
      args.splitKeys
    ).then(function(result) {
      var result_obj = new THBaseService_createTable_result({success: result});
      output.writeMessageBegin("createTable", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_createTable_result(err);
        output.writeMessageBegin("createTable", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createTable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.createTable(args.desc, args.splitKeys, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_createTable_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createTable", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createTable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_deleteTable = function(seqid, input, output) {
  var args = new THBaseService_deleteTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteTable.length === 1) {
    Q.fcall(this._handler.deleteTable.bind(this._handler),
      args.tableName
    ).then(function(result) {
      var result_obj = new THBaseService_deleteTable_result({success: result});
      output.writeMessageBegin("deleteTable", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_deleteTable_result(err);
        output.writeMessageBegin("deleteTable", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteTable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.deleteTable(args.tableName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_deleteTable_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteTable", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteTable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_truncateTable = function(seqid, input, output) {
  var args = new THBaseService_truncateTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.truncateTable.length === 2) {
    Q.fcall(this._handler.truncateTable.bind(this._handler),
      args.tableName,
      args.preserveSplits
    ).then(function(result) {
      var result_obj = new THBaseService_truncateTable_result({success: result});
      output.writeMessageBegin("truncateTable", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_truncateTable_result(err);
        output.writeMessageBegin("truncateTable", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("truncateTable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.truncateTable(args.tableName, args.preserveSplits, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_truncateTable_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("truncateTable", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("truncateTable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_enableTable = function(seqid, input, output) {
  var args = new THBaseService_enableTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.enableTable.length === 1) {
    Q.fcall(this._handler.enableTable.bind(this._handler),
      args.tableName
    ).then(function(result) {
      var result_obj = new THBaseService_enableTable_result({success: result});
      output.writeMessageBegin("enableTable", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_enableTable_result(err);
        output.writeMessageBegin("enableTable", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("enableTable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.enableTable(args.tableName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_enableTable_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("enableTable", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("enableTable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_disableTable = function(seqid, input, output) {
  var args = new THBaseService_disableTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.disableTable.length === 1) {
    Q.fcall(this._handler.disableTable.bind(this._handler),
      args.tableName
    ).then(function(result) {
      var result_obj = new THBaseService_disableTable_result({success: result});
      output.writeMessageBegin("disableTable", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_disableTable_result(err);
        output.writeMessageBegin("disableTable", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disableTable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.disableTable(args.tableName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_disableTable_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("disableTable", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disableTable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_isTableEnabled = function(seqid, input, output) {
  var args = new THBaseService_isTableEnabled_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isTableEnabled.length === 1) {
    Q.fcall(this._handler.isTableEnabled.bind(this._handler),
      args.tableName
    ).then(function(result) {
      var result_obj = new THBaseService_isTableEnabled_result({success: result});
      output.writeMessageBegin("isTableEnabled", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_isTableEnabled_result(err);
        output.writeMessageBegin("isTableEnabled", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isTableEnabled", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.isTableEnabled(args.tableName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_isTableEnabled_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isTableEnabled", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isTableEnabled", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_isTableDisabled = function(seqid, input, output) {
  var args = new THBaseService_isTableDisabled_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isTableDisabled.length === 1) {
    Q.fcall(this._handler.isTableDisabled.bind(this._handler),
      args.tableName
    ).then(function(result) {
      var result_obj = new THBaseService_isTableDisabled_result({success: result});
      output.writeMessageBegin("isTableDisabled", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_isTableDisabled_result(err);
        output.writeMessageBegin("isTableDisabled", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isTableDisabled", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.isTableDisabled(args.tableName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_isTableDisabled_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isTableDisabled", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isTableDisabled", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_isTableAvailable = function(seqid, input, output) {
  var args = new THBaseService_isTableAvailable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isTableAvailable.length === 1) {
    Q.fcall(this._handler.isTableAvailable.bind(this._handler),
      args.tableName
    ).then(function(result) {
      var result_obj = new THBaseService_isTableAvailable_result({success: result});
      output.writeMessageBegin("isTableAvailable", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_isTableAvailable_result(err);
        output.writeMessageBegin("isTableAvailable", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isTableAvailable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.isTableAvailable(args.tableName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_isTableAvailable_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isTableAvailable", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isTableAvailable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_isTableAvailableWithSplit = function(seqid, input, output) {
  var args = new THBaseService_isTableAvailableWithSplit_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isTableAvailableWithSplit.length === 2) {
    Q.fcall(this._handler.isTableAvailableWithSplit.bind(this._handler),
      args.tableName,
      args.splitKeys
    ).then(function(result) {
      var result_obj = new THBaseService_isTableAvailableWithSplit_result({success: result});
      output.writeMessageBegin("isTableAvailableWithSplit", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_isTableAvailableWithSplit_result(err);
        output.writeMessageBegin("isTableAvailableWithSplit", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isTableAvailableWithSplit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.isTableAvailableWithSplit(args.tableName, args.splitKeys, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_isTableAvailableWithSplit_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isTableAvailableWithSplit", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isTableAvailableWithSplit", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_addColumnFamily = function(seqid, input, output) {
  var args = new THBaseService_addColumnFamily_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addColumnFamily.length === 2) {
    Q.fcall(this._handler.addColumnFamily.bind(this._handler),
      args.tableName,
      args.column
    ).then(function(result) {
      var result_obj = new THBaseService_addColumnFamily_result({success: result});
      output.writeMessageBegin("addColumnFamily", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_addColumnFamily_result(err);
        output.writeMessageBegin("addColumnFamily", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addColumnFamily", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.addColumnFamily(args.tableName, args.column, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_addColumnFamily_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addColumnFamily", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addColumnFamily", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_deleteColumnFamily = function(seqid, input, output) {
  var args = new THBaseService_deleteColumnFamily_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteColumnFamily.length === 2) {
    Q.fcall(this._handler.deleteColumnFamily.bind(this._handler),
      args.tableName,
      args.column
    ).then(function(result) {
      var result_obj = new THBaseService_deleteColumnFamily_result({success: result});
      output.writeMessageBegin("deleteColumnFamily", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_deleteColumnFamily_result(err);
        output.writeMessageBegin("deleteColumnFamily", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteColumnFamily", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.deleteColumnFamily(args.tableName, args.column, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_deleteColumnFamily_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteColumnFamily", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteColumnFamily", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_modifyColumnFamily = function(seqid, input, output) {
  var args = new THBaseService_modifyColumnFamily_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.modifyColumnFamily.length === 2) {
    Q.fcall(this._handler.modifyColumnFamily.bind(this._handler),
      args.tableName,
      args.column
    ).then(function(result) {
      var result_obj = new THBaseService_modifyColumnFamily_result({success: result});
      output.writeMessageBegin("modifyColumnFamily", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_modifyColumnFamily_result(err);
        output.writeMessageBegin("modifyColumnFamily", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("modifyColumnFamily", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.modifyColumnFamily(args.tableName, args.column, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_modifyColumnFamily_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("modifyColumnFamily", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("modifyColumnFamily", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_modifyTable = function(seqid, input, output) {
  var args = new THBaseService_modifyTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.modifyTable.length === 1) {
    Q.fcall(this._handler.modifyTable.bind(this._handler),
      args.desc
    ).then(function(result) {
      var result_obj = new THBaseService_modifyTable_result({success: result});
      output.writeMessageBegin("modifyTable", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_modifyTable_result(err);
        output.writeMessageBegin("modifyTable", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("modifyTable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.modifyTable(args.desc, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_modifyTable_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("modifyTable", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("modifyTable", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_createNamespace = function(seqid, input, output) {
  var args = new THBaseService_createNamespace_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createNamespace.length === 1) {
    Q.fcall(this._handler.createNamespace.bind(this._handler),
      args.namespaceDesc
    ).then(function(result) {
      var result_obj = new THBaseService_createNamespace_result({success: result});
      output.writeMessageBegin("createNamespace", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_createNamespace_result(err);
        output.writeMessageBegin("createNamespace", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createNamespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.createNamespace(args.namespaceDesc, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_createNamespace_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createNamespace", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createNamespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_modifyNamespace = function(seqid, input, output) {
  var args = new THBaseService_modifyNamespace_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.modifyNamespace.length === 1) {
    Q.fcall(this._handler.modifyNamespace.bind(this._handler),
      args.namespaceDesc
    ).then(function(result) {
      var result_obj = new THBaseService_modifyNamespace_result({success: result});
      output.writeMessageBegin("modifyNamespace", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_modifyNamespace_result(err);
        output.writeMessageBegin("modifyNamespace", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("modifyNamespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.modifyNamespace(args.namespaceDesc, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_modifyNamespace_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("modifyNamespace", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("modifyNamespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_deleteNamespace = function(seqid, input, output) {
  var args = new THBaseService_deleteNamespace_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteNamespace.length === 1) {
    Q.fcall(this._handler.deleteNamespace.bind(this._handler),
      args.name
    ).then(function(result) {
      var result_obj = new THBaseService_deleteNamespace_result({success: result});
      output.writeMessageBegin("deleteNamespace", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_deleteNamespace_result(err);
        output.writeMessageBegin("deleteNamespace", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteNamespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.deleteNamespace(args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_deleteNamespace_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteNamespace", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteNamespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_getNamespaceDescriptor = function(seqid, input, output) {
  var args = new THBaseService_getNamespaceDescriptor_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getNamespaceDescriptor.length === 1) {
    Q.fcall(this._handler.getNamespaceDescriptor.bind(this._handler),
      args.name
    ).then(function(result) {
      var result_obj = new THBaseService_getNamespaceDescriptor_result({success: result});
      output.writeMessageBegin("getNamespaceDescriptor", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_getNamespaceDescriptor_result(err);
        output.writeMessageBegin("getNamespaceDescriptor", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNamespaceDescriptor", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getNamespaceDescriptor(args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_getNamespaceDescriptor_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getNamespaceDescriptor", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNamespaceDescriptor", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
THBaseServiceProcessor.prototype.process_listNamespaceDescriptors = function(seqid, input, output) {
  var args = new THBaseService_listNamespaceDescriptors_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listNamespaceDescriptors.length === 0) {
    Q.fcall(this._handler.listNamespaceDescriptors.bind(this._handler)
    ).then(function(result) {
      var result_obj = new THBaseService_listNamespaceDescriptors_result({success: result});
      output.writeMessageBegin("listNamespaceDescriptors", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.TIOError) {
        result = new THBaseService_listNamespaceDescriptors_result(err);
        output.writeMessageBegin("listNamespaceDescriptors", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listNamespaceDescriptors", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.listNamespaceDescriptors(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.TIOError) {
        result_obj = new THBaseService_listNamespaceDescriptors_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listNamespaceDescriptors", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listNamespaceDescriptors", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
